// Copyright 2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: test/test.proto

// buf:lint:ignore PACKAGE_VERSION_SUFFIX
// buf:lint:ignore PACKAGE_DIRECTORY_MATCH

package test

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Enum int32

const (
	Enum_ENUM_UNSPECIFIED Enum = 0
	Enum_ENUM_1           Enum = 1
	Enum_ENUM_2           Enum = 2
	Enum_ENUM_3           Enum = 3
)

// Enum value maps for Enum.
var (
	Enum_name = map[int32]string{
		0: "ENUM_UNSPECIFIED",
		1: "ENUM_1",
		2: "ENUM_2",
		3: "ENUM_3",
	}
	Enum_value = map[string]int32{
		"ENUM_UNSPECIFIED": 0,
		"ENUM_1":           1,
		"ENUM_2":           2,
		"ENUM_3":           3,
	}
)

func (x Enum) Enum() *Enum {
	p := new(Enum)
	*p = x
	return p
}

func (x Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_test_test_proto_enumTypes[0].Descriptor()
}

func (Enum) Type() protoreflect.EnumType {
	return &file_test_test_proto_enumTypes[0]
}

func (x Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Enum.Descriptor instead.
func (Enum) EnumDescriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{0}
}

type Scalars struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	A1            int32                  `protobuf:"varint,1,opt,name=a1,proto3" json:"a1,omitempty"`
	A2            int64                  `protobuf:"varint,2,opt,name=a2,proto3" json:"a2,omitempty"`
	A3            uint32                 `protobuf:"varint,3,opt,name=a3,proto3" json:"a3,omitempty"`
	A4            uint64                 `protobuf:"varint,4,opt,name=a4,proto3" json:"a4,omitempty"`
	A5            int32                  `protobuf:"zigzag32,5,opt,name=a5,proto3" json:"a5,omitempty"`
	A6            int64                  `protobuf:"zigzag64,6,opt,name=a6,proto3" json:"a6,omitempty"`
	A7            uint32                 `protobuf:"fixed32,7,opt,name=a7,proto3" json:"a7,omitempty"`
	A8            uint64                 `protobuf:"fixed64,8,opt,name=a8,proto3" json:"a8,omitempty"`
	A9            int32                  `protobuf:"fixed32,9,opt,name=a9,proto3" json:"a9,omitempty"`
	A10           int64                  `protobuf:"fixed64,10,opt,name=a10,proto3" json:"a10,omitempty"`
	A11           float32                `protobuf:"fixed32,11,opt,name=a11,proto3" json:"a11,omitempty"`
	A12           float64                `protobuf:"fixed64,12,opt,name=a12,proto3" json:"a12,omitempty"`
	A13           bool                   `protobuf:"varint,13,opt,name=a13,proto3" json:"a13,omitempty"`
	A14           string                 `protobuf:"bytes,14,opt,name=a14,proto3" json:"a14,omitempty"`
	A15           []byte                 `protobuf:"bytes,15,opt,name=a15,proto3" json:"a15,omitempty"`
	B1            *int32                 `protobuf:"varint,21,opt,name=b1,proto3,oneof" json:"b1,omitempty"`
	B2            *int64                 `protobuf:"varint,22,opt,name=b2,proto3,oneof" json:"b2,omitempty"`
	B3            *uint32                `protobuf:"varint,23,opt,name=b3,proto3,oneof" json:"b3,omitempty"`
	B4            *uint64                `protobuf:"varint,24,opt,name=b4,proto3,oneof" json:"b4,omitempty"`
	B5            *int32                 `protobuf:"zigzag32,25,opt,name=b5,proto3,oneof" json:"b5,omitempty"`
	B6            *int64                 `protobuf:"zigzag64,26,opt,name=b6,proto3,oneof" json:"b6,omitempty"`
	B7            *uint32                `protobuf:"fixed32,27,opt,name=b7,proto3,oneof" json:"b7,omitempty"`
	B8            *uint64                `protobuf:"fixed64,28,opt,name=b8,proto3,oneof" json:"b8,omitempty"`
	B9            *int32                 `protobuf:"fixed32,29,opt,name=b9,proto3,oneof" json:"b9,omitempty"`
	B10           *int64                 `protobuf:"fixed64,30,opt,name=b10,proto3,oneof" json:"b10,omitempty"`
	B11           *float32               `protobuf:"fixed32,31,opt,name=b11,proto3,oneof" json:"b11,omitempty"`
	B12           *float64               `protobuf:"fixed64,32,opt,name=b12,proto3,oneof" json:"b12,omitempty"`
	B13           *bool                  `protobuf:"varint,33,opt,name=b13,proto3,oneof" json:"b13,omitempty"`
	B14           *string                `protobuf:"bytes,34,opt,name=b14,proto3,oneof" json:"b14,omitempty"`
	B15           []byte                 `protobuf:"bytes,35,opt,name=b15,proto3,oneof" json:"b15,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scalars) Reset() {
	*x = Scalars{}
	mi := &file_test_test_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scalars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scalars) ProtoMessage() {}

func (x *Scalars) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scalars.ProtoReflect.Descriptor instead.
func (*Scalars) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{0}
}

func (x *Scalars) GetA1() int32 {
	if x != nil {
		return x.A1
	}
	return 0
}

func (x *Scalars) GetA2() int64 {
	if x != nil {
		return x.A2
	}
	return 0
}

func (x *Scalars) GetA3() uint32 {
	if x != nil {
		return x.A3
	}
	return 0
}

func (x *Scalars) GetA4() uint64 {
	if x != nil {
		return x.A4
	}
	return 0
}

func (x *Scalars) GetA5() int32 {
	if x != nil {
		return x.A5
	}
	return 0
}

func (x *Scalars) GetA6() int64 {
	if x != nil {
		return x.A6
	}
	return 0
}

func (x *Scalars) GetA7() uint32 {
	if x != nil {
		return x.A7
	}
	return 0
}

func (x *Scalars) GetA8() uint64 {
	if x != nil {
		return x.A8
	}
	return 0
}

func (x *Scalars) GetA9() int32 {
	if x != nil {
		return x.A9
	}
	return 0
}

func (x *Scalars) GetA10() int64 {
	if x != nil {
		return x.A10
	}
	return 0
}

func (x *Scalars) GetA11() float32 {
	if x != nil {
		return x.A11
	}
	return 0
}

func (x *Scalars) GetA12() float64 {
	if x != nil {
		return x.A12
	}
	return 0
}

func (x *Scalars) GetA13() bool {
	if x != nil {
		return x.A13
	}
	return false
}

func (x *Scalars) GetA14() string {
	if x != nil {
		return x.A14
	}
	return ""
}

func (x *Scalars) GetA15() []byte {
	if x != nil {
		return x.A15
	}
	return nil
}

func (x *Scalars) GetB1() int32 {
	if x != nil && x.B1 != nil {
		return *x.B1
	}
	return 0
}

func (x *Scalars) GetB2() int64 {
	if x != nil && x.B2 != nil {
		return *x.B2
	}
	return 0
}

func (x *Scalars) GetB3() uint32 {
	if x != nil && x.B3 != nil {
		return *x.B3
	}
	return 0
}

func (x *Scalars) GetB4() uint64 {
	if x != nil && x.B4 != nil {
		return *x.B4
	}
	return 0
}

func (x *Scalars) GetB5() int32 {
	if x != nil && x.B5 != nil {
		return *x.B5
	}
	return 0
}

func (x *Scalars) GetB6() int64 {
	if x != nil && x.B6 != nil {
		return *x.B6
	}
	return 0
}

func (x *Scalars) GetB7() uint32 {
	if x != nil && x.B7 != nil {
		return *x.B7
	}
	return 0
}

func (x *Scalars) GetB8() uint64 {
	if x != nil && x.B8 != nil {
		return *x.B8
	}
	return 0
}

func (x *Scalars) GetB9() int32 {
	if x != nil && x.B9 != nil {
		return *x.B9
	}
	return 0
}

func (x *Scalars) GetB10() int64 {
	if x != nil && x.B10 != nil {
		return *x.B10
	}
	return 0
}

func (x *Scalars) GetB11() float32 {
	if x != nil && x.B11 != nil {
		return *x.B11
	}
	return 0
}

func (x *Scalars) GetB12() float64 {
	if x != nil && x.B12 != nil {
		return *x.B12
	}
	return 0
}

func (x *Scalars) GetB13() bool {
	if x != nil && x.B13 != nil {
		return *x.B13
	}
	return false
}

func (x *Scalars) GetB14() string {
	if x != nil && x.B14 != nil {
		return *x.B14
	}
	return ""
}

func (x *Scalars) GetB15() []byte {
	if x != nil {
		return x.B15
	}
	return nil
}

type Numbers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	A1            int32                  `protobuf:"varint,1,opt,name=a1,proto3" json:"a1,omitempty"`         // 0x08
	A2            int32                  `protobuf:"varint,15,opt,name=a2,proto3" json:"a2,omitempty"`        // 0x78
	A3            int32                  `protobuf:"varint,16,opt,name=a3,proto3" json:"a3,omitempty"`        // 0x0180
	A4            int32                  `protobuf:"varint,2047,opt,name=a4,proto3" json:"a4,omitempty"`      // 0x7ff8
	A5            int32                  `protobuf:"varint,2048,opt,name=a5,proto3" json:"a5,omitempty"`      // 0x018080
	A6            int32                  `protobuf:"varint,262143,opt,name=a6,proto3" json:"a6,omitempty"`    // 0x7ffff8
	A7            int32                  `protobuf:"varint,262144,opt,name=a7,proto3" json:"a7,omitempty"`    // 0x01808080
	A8            int32                  `protobuf:"varint,33554431,opt,name=a8,proto3" json:"a8,omitempty"`  // 0x7ffffff8
	A9            int32                  `protobuf:"varint,33554432,opt,name=a9,proto3" json:"a9,omitempty"`  // 0x0180808080
	Aa            int32                  `protobuf:"varint,536870911,opt,name=aa,proto3" json:"aa,omitempty"` // 0x0ffffffff6
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Numbers) Reset() {
	*x = Numbers{}
	mi := &file_test_test_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Numbers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Numbers) ProtoMessage() {}

func (x *Numbers) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Numbers.ProtoReflect.Descriptor instead.
func (*Numbers) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{1}
}

func (x *Numbers) GetA1() int32 {
	if x != nil {
		return x.A1
	}
	return 0
}

func (x *Numbers) GetA2() int32 {
	if x != nil {
		return x.A2
	}
	return 0
}

func (x *Numbers) GetA3() int32 {
	if x != nil {
		return x.A3
	}
	return 0
}

func (x *Numbers) GetA4() int32 {
	if x != nil {
		return x.A4
	}
	return 0
}

func (x *Numbers) GetA5() int32 {
	if x != nil {
		return x.A5
	}
	return 0
}

func (x *Numbers) GetA6() int32 {
	if x != nil {
		return x.A6
	}
	return 0
}

func (x *Numbers) GetA7() int32 {
	if x != nil {
		return x.A7
	}
	return 0
}

func (x *Numbers) GetA8() int32 {
	if x != nil {
		return x.A8
	}
	return 0
}

func (x *Numbers) GetA9() int32 {
	if x != nil {
		return x.A9
	}
	return 0
}

func (x *Numbers) GetAa() int32 {
	if x != nil {
		return x.Aa
	}
	return 0
}

type Repeated struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	R1            []int32                `protobuf:"varint,1,rep,packed,name=r1,proto3" json:"r1,omitempty"`
	R2            []int64                `protobuf:"varint,2,rep,packed,name=r2,proto3" json:"r2,omitempty"`
	R3            []int32                `protobuf:"zigzag32,3,rep,packed,name=r3,proto3" json:"r3,omitempty"`
	R4            []int64                `protobuf:"zigzag64,4,rep,packed,name=r4,proto3" json:"r4,omitempty"`
	R5            []uint32               `protobuf:"fixed32,5,rep,packed,name=r5,proto3" json:"r5,omitempty"`
	R6            []uint64               `protobuf:"fixed64,6,rep,packed,name=r6,proto3" json:"r6,omitempty"`
	R7            []string               `protobuf:"bytes,7,rep,name=r7,proto3" json:"r7,omitempty"`
	R8            [][]byte               `protobuf:"bytes,8,rep,name=r8,proto3" json:"r8,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Repeated) Reset() {
	*x = Repeated{}
	mi := &file_test_test_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Repeated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repeated) ProtoMessage() {}

func (x *Repeated) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repeated.ProtoReflect.Descriptor instead.
func (*Repeated) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{2}
}

func (x *Repeated) GetR1() []int32 {
	if x != nil {
		return x.R1
	}
	return nil
}

func (x *Repeated) GetR2() []int64 {
	if x != nil {
		return x.R2
	}
	return nil
}

func (x *Repeated) GetR3() []int32 {
	if x != nil {
		return x.R3
	}
	return nil
}

func (x *Repeated) GetR4() []int64 {
	if x != nil {
		return x.R4
	}
	return nil
}

func (x *Repeated) GetR5() []uint32 {
	if x != nil {
		return x.R5
	}
	return nil
}

func (x *Repeated) GetR6() []uint64 {
	if x != nil {
		return x.R6
	}
	return nil
}

func (x *Repeated) GetR7() []string {
	if x != nil {
		return x.R7
	}
	return nil
}

func (x *Repeated) GetR8() [][]byte {
	if x != nil {
		return x.R8
	}
	return nil
}

type Graph struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	V             int32                  `protobuf:"varint,1,opt,name=v,proto3" json:"v,omitempty"`
	S             *Graph                 `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
	R             []*Graph               `protobuf:"bytes,3,rep,name=r,proto3" json:"r,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Graph) Reset() {
	*x = Graph{}
	mi := &file_test_test_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Graph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graph) ProtoMessage() {}

func (x *Graph) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graph.ProtoReflect.Descriptor instead.
func (*Graph) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{3}
}

func (x *Graph) GetV() int32 {
	if x != nil {
		return x.V
	}
	return 0
}

func (x *Graph) GetS() *Graph {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *Graph) GetR() []*Graph {
	if x != nil {
		return x.R
	}
	return nil
}

type Oneof struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Single:
	//
	//	*Oneof_S1
	Single isOneof_Single `protobuf_oneof:"single"`
	// Types that are valid to be assigned to Multi:
	//
	//	*Oneof_M1
	//	*Oneof_M2
	//	*Oneof_M3
	//	*Oneof_M4
	//	*Oneof_M5
	//	*Oneof_M6
	//	*Oneof_M7
	//	*Oneof_M8
	//	*Oneof_M9
	//	*Oneof_M10
	Multi         isOneof_Multi `protobuf_oneof:"multi"`
	Tail          int32         `protobuf:"varint,30,opt,name=tail,proto3" json:"tail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Oneof) Reset() {
	*x = Oneof{}
	mi := &file_test_test_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Oneof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oneof) ProtoMessage() {}

func (x *Oneof) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oneof.ProtoReflect.Descriptor instead.
func (*Oneof) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{4}
}

func (x *Oneof) GetSingle() isOneof_Single {
	if x != nil {
		return x.Single
	}
	return nil
}

func (x *Oneof) GetS1() int32 {
	if x != nil {
		if x, ok := x.Single.(*Oneof_S1); ok {
			return x.S1
		}
	}
	return 0
}

func (x *Oneof) GetMulti() isOneof_Multi {
	if x != nil {
		return x.Multi
	}
	return nil
}

func (x *Oneof) GetM1() int32 {
	if x != nil {
		if x, ok := x.Multi.(*Oneof_M1); ok {
			return x.M1
		}
	}
	return 0
}

func (x *Oneof) GetM2() int64 {
	if x != nil {
		if x, ok := x.Multi.(*Oneof_M2); ok {
			return x.M2
		}
	}
	return 0
}

func (x *Oneof) GetM3() int32 {
	if x != nil {
		if x, ok := x.Multi.(*Oneof_M3); ok {
			return x.M3
		}
	}
	return 0
}

func (x *Oneof) GetM4() int64 {
	if x != nil {
		if x, ok := x.Multi.(*Oneof_M4); ok {
			return x.M4
		}
	}
	return 0
}

func (x *Oneof) GetM5() uint32 {
	if x != nil {
		if x, ok := x.Multi.(*Oneof_M5); ok {
			return x.M5
		}
	}
	return 0
}

func (x *Oneof) GetM6() uint64 {
	if x != nil {
		if x, ok := x.Multi.(*Oneof_M6); ok {
			return x.M6
		}
	}
	return 0
}

func (x *Oneof) GetM7() bool {
	if x != nil {
		if x, ok := x.Multi.(*Oneof_M7); ok {
			return x.M7
		}
	}
	return false
}

func (x *Oneof) GetM8() string {
	if x != nil {
		if x, ok := x.Multi.(*Oneof_M8); ok {
			return x.M8
		}
	}
	return ""
}

func (x *Oneof) GetM9() []byte {
	if x != nil {
		if x, ok := x.Multi.(*Oneof_M9); ok {
			return x.M9
		}
	}
	return nil
}

func (x *Oneof) GetM10() *Oneof {
	if x != nil {
		if x, ok := x.Multi.(*Oneof_M10); ok {
			return x.M10
		}
	}
	return nil
}

func (x *Oneof) GetTail() int32 {
	if x != nil {
		return x.Tail
	}
	return 0
}

type isOneof_Single interface {
	isOneof_Single()
}

type Oneof_S1 struct {
	S1 int32 `protobuf:"varint,1,opt,name=s1,proto3,oneof"`
}

func (*Oneof_S1) isOneof_Single() {}

type isOneof_Multi interface {
	isOneof_Multi()
}

type Oneof_M1 struct {
	M1 int32 `protobuf:"varint,11,opt,name=m1,proto3,oneof"`
}

type Oneof_M2 struct {
	M2 int64 `protobuf:"varint,12,opt,name=m2,proto3,oneof"`
}

type Oneof_M3 struct {
	M3 int32 `protobuf:"zigzag32,13,opt,name=m3,proto3,oneof"`
}

type Oneof_M4 struct {
	M4 int64 `protobuf:"zigzag64,14,opt,name=m4,proto3,oneof"`
}

type Oneof_M5 struct {
	M5 uint32 `protobuf:"fixed32,15,opt,name=m5,proto3,oneof"`
}

type Oneof_M6 struct {
	M6 uint64 `protobuf:"fixed64,16,opt,name=m6,proto3,oneof"`
}

type Oneof_M7 struct {
	M7 bool `protobuf:"varint,17,opt,name=m7,proto3,oneof"`
}

type Oneof_M8 struct {
	M8 string `protobuf:"bytes,18,opt,name=m8,proto3,oneof"`
}

type Oneof_M9 struct {
	M9 []byte `protobuf:"bytes,19,opt,name=m9,proto3,oneof"`
}

type Oneof_M10 struct {
	M10 *Oneof `protobuf:"bytes,20,opt,name=m10,proto3,oneof"`
}

func (*Oneof_M1) isOneof_Multi() {}

func (*Oneof_M2) isOneof_Multi() {}

func (*Oneof_M3) isOneof_Multi() {}

func (*Oneof_M4) isOneof_Multi() {}

func (*Oneof_M5) isOneof_Multi() {}

func (*Oneof_M6) isOneof_Multi() {}

func (*Oneof_M7) isOneof_Multi() {}

func (*Oneof_M8) isOneof_Multi() {}

func (*Oneof_M9) isOneof_Multi() {}

func (*Oneof_M10) isOneof_Multi() {}

type Maps struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	M10           map[int32]int32        `protobuf:"bytes,16,rep,name=m10,proto3" json:"m10,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M11           map[int32]int64        `protobuf:"bytes,17,rep,name=m11,proto3" json:"m11,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M12           map[int32]uint32       `protobuf:"bytes,18,rep,name=m12,proto3" json:"m12,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M13           map[int32]uint64       `protobuf:"bytes,19,rep,name=m13,proto3" json:"m13,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M14           map[int32]int32        `protobuf:"bytes,20,rep,name=m14,proto3" json:"m14,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	M15           map[int32]int64        `protobuf:"bytes,21,rep,name=m15,proto3" json:"m15,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	M16           map[int32]uint32       `protobuf:"bytes,22,rep,name=m16,proto3" json:"m16,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M17           map[int32]uint64       `protobuf:"bytes,23,rep,name=m17,proto3" json:"m17,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M18           map[int32]int32        `protobuf:"bytes,24,rep,name=m18,proto3" json:"m18,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M19           map[int32]int64        `protobuf:"bytes,25,rep,name=m19,proto3" json:"m19,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M1A           map[int32]float32      `protobuf:"bytes,26,rep,name=m1a,proto3" json:"m1a,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M1B           map[int32]float64      `protobuf:"bytes,27,rep,name=m1b,proto3" json:"m1b,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M1C           map[int32]bool         `protobuf:"bytes,28,rep,name=m1c,proto3" json:"m1c,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M1D           map[int32]Enum         `protobuf:"bytes,29,rep,name=m1d,proto3" json:"m1d,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=hyperpb.test.Enum"`
	M1E           map[int32]string       `protobuf:"bytes,30,rep,name=m1e,proto3" json:"m1e,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M1F           map[int32][]byte       `protobuf:"bytes,31,rep,name=m1f,proto3" json:"m1f,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M20           map[int64]int32        `protobuf:"bytes,32,rep,name=m20,proto3" json:"m20,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M21           map[int64]int64        `protobuf:"bytes,33,rep,name=m21,proto3" json:"m21,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M22           map[int64]uint32       `protobuf:"bytes,34,rep,name=m22,proto3" json:"m22,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M23           map[int64]uint64       `protobuf:"bytes,35,rep,name=m23,proto3" json:"m23,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M24           map[int64]int32        `protobuf:"bytes,36,rep,name=m24,proto3" json:"m24,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	M25           map[int64]int64        `protobuf:"bytes,37,rep,name=m25,proto3" json:"m25,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	M26           map[int64]uint32       `protobuf:"bytes,38,rep,name=m26,proto3" json:"m26,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M27           map[int64]uint64       `protobuf:"bytes,39,rep,name=m27,proto3" json:"m27,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M28           map[int64]int32        `protobuf:"bytes,40,rep,name=m28,proto3" json:"m28,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M29           map[int64]int64        `protobuf:"bytes,41,rep,name=m29,proto3" json:"m29,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M2A           map[int64]float32      `protobuf:"bytes,42,rep,name=m2a,proto3" json:"m2a,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M2B           map[int64]float64      `protobuf:"bytes,43,rep,name=m2b,proto3" json:"m2b,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M2C           map[int64]bool         `protobuf:"bytes,44,rep,name=m2c,proto3" json:"m2c,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M2D           map[int64]Enum         `protobuf:"bytes,45,rep,name=m2d,proto3" json:"m2d,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=hyperpb.test.Enum"`
	M2E           map[int64]string       `protobuf:"bytes,46,rep,name=m2e,proto3" json:"m2e,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M2F           map[int64][]byte       `protobuf:"bytes,47,rep,name=m2f,proto3" json:"m2f,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M30           map[uint32]int32       `protobuf:"bytes,48,rep,name=m30,proto3" json:"m30,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M31           map[uint32]int64       `protobuf:"bytes,49,rep,name=m31,proto3" json:"m31,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M32           map[uint32]uint32      `protobuf:"bytes,50,rep,name=m32,proto3" json:"m32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M33           map[uint32]uint64      `protobuf:"bytes,51,rep,name=m33,proto3" json:"m33,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M34           map[uint32]int32       `protobuf:"bytes,52,rep,name=m34,proto3" json:"m34,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	M35           map[uint32]int64       `protobuf:"bytes,53,rep,name=m35,proto3" json:"m35,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	M36           map[uint32]uint32      `protobuf:"bytes,54,rep,name=m36,proto3" json:"m36,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M37           map[uint32]uint64      `protobuf:"bytes,55,rep,name=m37,proto3" json:"m37,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M38           map[uint32]int32       `protobuf:"bytes,56,rep,name=m38,proto3" json:"m38,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M39           map[uint32]int64       `protobuf:"bytes,57,rep,name=m39,proto3" json:"m39,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M3A           map[uint32]float32     `protobuf:"bytes,58,rep,name=m3a,proto3" json:"m3a,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M3B           map[uint32]float64     `protobuf:"bytes,59,rep,name=m3b,proto3" json:"m3b,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M3C           map[uint32]bool        `protobuf:"bytes,60,rep,name=m3c,proto3" json:"m3c,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M3D           map[uint32]Enum        `protobuf:"bytes,61,rep,name=m3d,proto3" json:"m3d,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=hyperpb.test.Enum"`
	M3E           map[uint32]string      `protobuf:"bytes,62,rep,name=m3e,proto3" json:"m3e,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M3F           map[uint32][]byte      `protobuf:"bytes,63,rep,name=m3f,proto3" json:"m3f,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M40           map[uint64]int32       `protobuf:"bytes,64,rep,name=m40,proto3" json:"m40,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M41           map[uint64]int64       `protobuf:"bytes,65,rep,name=m41,proto3" json:"m41,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M42           map[uint64]uint32      `protobuf:"bytes,66,rep,name=m42,proto3" json:"m42,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M43           map[uint64]uint64      `protobuf:"bytes,67,rep,name=m43,proto3" json:"m43,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M44           map[uint64]int32       `protobuf:"bytes,68,rep,name=m44,proto3" json:"m44,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	M45           map[uint64]int64       `protobuf:"bytes,69,rep,name=m45,proto3" json:"m45,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	M46           map[uint64]uint32      `protobuf:"bytes,70,rep,name=m46,proto3" json:"m46,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M47           map[uint64]uint64      `protobuf:"bytes,71,rep,name=m47,proto3" json:"m47,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M48           map[uint64]int32       `protobuf:"bytes,72,rep,name=m48,proto3" json:"m48,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M49           map[uint64]int64       `protobuf:"bytes,73,rep,name=m49,proto3" json:"m49,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M4A           map[uint64]float32     `protobuf:"bytes,74,rep,name=m4a,proto3" json:"m4a,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M4B           map[uint64]float64     `protobuf:"bytes,75,rep,name=m4b,proto3" json:"m4b,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M4C           map[uint64]bool        `protobuf:"bytes,76,rep,name=m4c,proto3" json:"m4c,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M4D           map[uint64]Enum        `protobuf:"bytes,77,rep,name=m4d,proto3" json:"m4d,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=hyperpb.test.Enum"`
	M4E           map[uint64]string      `protobuf:"bytes,78,rep,name=m4e,proto3" json:"m4e,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M4F           map[uint64][]byte      `protobuf:"bytes,79,rep,name=m4f,proto3" json:"m4f,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M50           map[int32]int32        `protobuf:"bytes,80,rep,name=m50,proto3" json:"m50,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M51           map[int32]int64        `protobuf:"bytes,81,rep,name=m51,proto3" json:"m51,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M52           map[int32]uint32       `protobuf:"bytes,82,rep,name=m52,proto3" json:"m52,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M53           map[int32]uint64       `protobuf:"bytes,83,rep,name=m53,proto3" json:"m53,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M54           map[int32]int32        `protobuf:"bytes,84,rep,name=m54,proto3" json:"m54,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	M55           map[int32]int64        `protobuf:"bytes,85,rep,name=m55,proto3" json:"m55,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	M56           map[int32]uint32       `protobuf:"bytes,86,rep,name=m56,proto3" json:"m56,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M57           map[int32]uint64       `protobuf:"bytes,87,rep,name=m57,proto3" json:"m57,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M58           map[int32]int32        `protobuf:"bytes,88,rep,name=m58,proto3" json:"m58,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M59           map[int32]int64        `protobuf:"bytes,89,rep,name=m59,proto3" json:"m59,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M5A           map[int32]float32      `protobuf:"bytes,90,rep,name=m5a,proto3" json:"m5a,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M5B           map[int32]float64      `protobuf:"bytes,91,rep,name=m5b,proto3" json:"m5b,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M5C           map[int32]bool         `protobuf:"bytes,92,rep,name=m5c,proto3" json:"m5c,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M5D           map[int32]Enum         `protobuf:"bytes,93,rep,name=m5d,proto3" json:"m5d,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=hyperpb.test.Enum"`
	M5E           map[int32]string       `protobuf:"bytes,94,rep,name=m5e,proto3" json:"m5e,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M5F           map[int32][]byte       `protobuf:"bytes,95,rep,name=m5f,proto3" json:"m5f,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M60           map[int64]int32        `protobuf:"bytes,96,rep,name=m60,proto3" json:"m60,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M61           map[int64]int64        `protobuf:"bytes,97,rep,name=m61,proto3" json:"m61,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M62           map[int64]uint32       `protobuf:"bytes,98,rep,name=m62,proto3" json:"m62,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M63           map[int64]uint64       `protobuf:"bytes,99,rep,name=m63,proto3" json:"m63,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M64           map[int64]int32        `protobuf:"bytes,100,rep,name=m64,proto3" json:"m64,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	M65           map[int64]int64        `protobuf:"bytes,101,rep,name=m65,proto3" json:"m65,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	M66           map[int64]uint32       `protobuf:"bytes,102,rep,name=m66,proto3" json:"m66,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M67           map[int64]uint64       `protobuf:"bytes,103,rep,name=m67,proto3" json:"m67,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M68           map[int64]int32        `protobuf:"bytes,104,rep,name=m68,proto3" json:"m68,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M69           map[int64]int64        `protobuf:"bytes,105,rep,name=m69,proto3" json:"m69,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M6A           map[int64]float32      `protobuf:"bytes,106,rep,name=m6a,proto3" json:"m6a,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M6B           map[int64]float64      `protobuf:"bytes,107,rep,name=m6b,proto3" json:"m6b,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M6C           map[int64]bool         `protobuf:"bytes,108,rep,name=m6c,proto3" json:"m6c,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M6D           map[int64]Enum         `protobuf:"bytes,109,rep,name=m6d,proto3" json:"m6d,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=hyperpb.test.Enum"`
	M6E           map[int64]string       `protobuf:"bytes,110,rep,name=m6e,proto3" json:"m6e,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M6F           map[int64][]byte       `protobuf:"bytes,111,rep,name=m6f,proto3" json:"m6f,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M70           map[uint32]int32       `protobuf:"bytes,112,rep,name=m70,proto3" json:"m70,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M71           map[uint32]int64       `protobuf:"bytes,113,rep,name=m71,proto3" json:"m71,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M72           map[uint32]uint32      `protobuf:"bytes,114,rep,name=m72,proto3" json:"m72,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M73           map[uint32]uint64      `protobuf:"bytes,115,rep,name=m73,proto3" json:"m73,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M74           map[uint32]int32       `protobuf:"bytes,116,rep,name=m74,proto3" json:"m74,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	M75           map[uint32]int64       `protobuf:"bytes,117,rep,name=m75,proto3" json:"m75,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	M76           map[uint32]uint32      `protobuf:"bytes,118,rep,name=m76,proto3" json:"m76,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M77           map[uint32]uint64      `protobuf:"bytes,119,rep,name=m77,proto3" json:"m77,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M78           map[uint32]int32       `protobuf:"bytes,120,rep,name=m78,proto3" json:"m78,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M79           map[uint32]int64       `protobuf:"bytes,121,rep,name=m79,proto3" json:"m79,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M7A           map[uint32]float32     `protobuf:"bytes,122,rep,name=m7a,proto3" json:"m7a,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M7B           map[uint32]float64     `protobuf:"bytes,123,rep,name=m7b,proto3" json:"m7b,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M7C           map[uint32]bool        `protobuf:"bytes,124,rep,name=m7c,proto3" json:"m7c,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M7D           map[uint32]Enum        `protobuf:"bytes,125,rep,name=m7d,proto3" json:"m7d,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=hyperpb.test.Enum"`
	M7E           map[uint32]string      `protobuf:"bytes,126,rep,name=m7e,proto3" json:"m7e,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M7F           map[uint32][]byte      `protobuf:"bytes,127,rep,name=m7f,proto3" json:"m7f,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M80           map[uint64]int32       `protobuf:"bytes,128,rep,name=m80,proto3" json:"m80,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M81           map[uint64]int64       `protobuf:"bytes,129,rep,name=m81,proto3" json:"m81,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M82           map[uint64]uint32      `protobuf:"bytes,130,rep,name=m82,proto3" json:"m82,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M83           map[uint64]uint64      `protobuf:"bytes,131,rep,name=m83,proto3" json:"m83,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M84           map[uint64]int32       `protobuf:"bytes,132,rep,name=m84,proto3" json:"m84,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	M85           map[uint64]int64       `protobuf:"bytes,133,rep,name=m85,proto3" json:"m85,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	M86           map[uint64]uint32      `protobuf:"bytes,134,rep,name=m86,proto3" json:"m86,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M87           map[uint64]uint64      `protobuf:"bytes,135,rep,name=m87,proto3" json:"m87,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M88           map[uint64]int32       `protobuf:"bytes,136,rep,name=m88,proto3" json:"m88,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M89           map[uint64]int64       `protobuf:"bytes,137,rep,name=m89,proto3" json:"m89,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M8A           map[uint64]float32     `protobuf:"bytes,138,rep,name=m8a,proto3" json:"m8a,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M8B           map[uint64]float64     `protobuf:"bytes,139,rep,name=m8b,proto3" json:"m8b,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M8C           map[uint64]bool        `protobuf:"bytes,140,rep,name=m8c,proto3" json:"m8c,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M8D           map[uint64]Enum        `protobuf:"bytes,141,rep,name=m8d,proto3" json:"m8d,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=hyperpb.test.Enum"`
	M8E           map[uint64]string      `protobuf:"bytes,142,rep,name=m8e,proto3" json:"m8e,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M8F           map[uint64][]byte      `protobuf:"bytes,143,rep,name=m8f,proto3" json:"m8f,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M90           map[int32]int32        `protobuf:"bytes,144,rep,name=m90,proto3" json:"m90,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M91           map[int32]int64        `protobuf:"bytes,145,rep,name=m91,proto3" json:"m91,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M92           map[int32]uint32       `protobuf:"bytes,146,rep,name=m92,proto3" json:"m92,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M93           map[int32]uint64       `protobuf:"bytes,147,rep,name=m93,proto3" json:"m93,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M94           map[int32]int32        `protobuf:"bytes,148,rep,name=m94,proto3" json:"m94,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	M95           map[int32]int64        `protobuf:"bytes,149,rep,name=m95,proto3" json:"m95,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	M96           map[int32]uint32       `protobuf:"bytes,150,rep,name=m96,proto3" json:"m96,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M97           map[int32]uint64       `protobuf:"bytes,151,rep,name=m97,proto3" json:"m97,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M98           map[int32]int32        `protobuf:"bytes,152,rep,name=m98,proto3" json:"m98,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M99           map[int32]int64        `protobuf:"bytes,153,rep,name=m99,proto3" json:"m99,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M9A           map[int32]float32      `protobuf:"bytes,154,rep,name=m9a,proto3" json:"m9a,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	M9B           map[int32]float64      `protobuf:"bytes,155,rep,name=m9b,proto3" json:"m9b,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	M9C           map[int32]bool         `protobuf:"bytes,156,rep,name=m9c,proto3" json:"m9c,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	M9D           map[int32]Enum         `protobuf:"bytes,157,rep,name=m9d,proto3" json:"m9d,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=hyperpb.test.Enum"`
	M9E           map[int32]string       `protobuf:"bytes,158,rep,name=m9e,proto3" json:"m9e,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M9F           map[int32][]byte       `protobuf:"bytes,159,rep,name=m9f,proto3" json:"m9f,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Ma0           map[int64]int32        `protobuf:"bytes,160,rep,name=ma0,proto3" json:"ma0,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Ma1           map[int64]int64        `protobuf:"bytes,161,rep,name=ma1,proto3" json:"ma1,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Ma2           map[int64]uint32       `protobuf:"bytes,162,rep,name=ma2,proto3" json:"ma2,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Ma3           map[int64]uint64       `protobuf:"bytes,163,rep,name=ma3,proto3" json:"ma3,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Ma4           map[int64]int32        `protobuf:"bytes,164,rep,name=ma4,proto3" json:"ma4,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	Ma5           map[int64]int64        `protobuf:"bytes,165,rep,name=ma5,proto3" json:"ma5,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	Ma6           map[int64]uint32       `protobuf:"bytes,166,rep,name=ma6,proto3" json:"ma6,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Ma7           map[int64]uint64       `protobuf:"bytes,167,rep,name=ma7,proto3" json:"ma7,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Ma8           map[int64]int32        `protobuf:"bytes,168,rep,name=ma8,proto3" json:"ma8,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Ma9           map[int64]int64        `protobuf:"bytes,169,rep,name=ma9,proto3" json:"ma9,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Maa           map[int64]float32      `protobuf:"bytes,170,rep,name=maa,proto3" json:"maa,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Mab           map[int64]float64      `protobuf:"bytes,171,rep,name=mab,proto3" json:"mab,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Mac           map[int64]bool         `protobuf:"bytes,172,rep,name=mac,proto3" json:"mac,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Mad           map[int64]Enum         `protobuf:"bytes,173,rep,name=mad,proto3" json:"mad,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=hyperpb.test.Enum"`
	Mae           map[int64]string       `protobuf:"bytes,174,rep,name=mae,proto3" json:"mae,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Maf           map[int64][]byte       `protobuf:"bytes,175,rep,name=maf,proto3" json:"maf,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Mb0           map[bool]int32         `protobuf:"bytes,176,rep,name=mb0,proto3" json:"mb0,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Mb1           map[bool]int64         `protobuf:"bytes,177,rep,name=mb1,proto3" json:"mb1,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Mb2           map[bool]uint32        `protobuf:"bytes,178,rep,name=mb2,proto3" json:"mb2,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Mb3           map[bool]uint64        `protobuf:"bytes,179,rep,name=mb3,proto3" json:"mb3,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Mb4           map[bool]int32         `protobuf:"bytes,180,rep,name=mb4,proto3" json:"mb4,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	Mb5           map[bool]int64         `protobuf:"bytes,181,rep,name=mb5,proto3" json:"mb5,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	Mb6           map[bool]uint32        `protobuf:"bytes,182,rep,name=mb6,proto3" json:"mb6,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Mb7           map[bool]uint64        `protobuf:"bytes,183,rep,name=mb7,proto3" json:"mb7,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Mb8           map[bool]int32         `protobuf:"bytes,184,rep,name=mb8,proto3" json:"mb8,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Mb9           map[bool]int64         `protobuf:"bytes,185,rep,name=mb9,proto3" json:"mb9,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Mba           map[bool]float32       `protobuf:"bytes,186,rep,name=mba,proto3" json:"mba,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Mbb           map[bool]float64       `protobuf:"bytes,187,rep,name=mbb,proto3" json:"mbb,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Mbc           map[bool]bool          `protobuf:"bytes,188,rep,name=mbc,proto3" json:"mbc,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Mbd           map[bool]Enum          `protobuf:"bytes,189,rep,name=mbd,proto3" json:"mbd,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=hyperpb.test.Enum"`
	Mbe           map[bool]string        `protobuf:"bytes,190,rep,name=mbe,proto3" json:"mbe,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Mbf           map[bool][]byte        `protobuf:"bytes,191,rep,name=mbf,proto3" json:"mbf,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Mc0           map[string]int32       `protobuf:"bytes,192,rep,name=mc0,proto3" json:"mc0,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Mc1           map[string]int64       `protobuf:"bytes,193,rep,name=mc1,proto3" json:"mc1,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Mc2           map[string]uint32      `protobuf:"bytes,194,rep,name=mc2,proto3" json:"mc2,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Mc3           map[string]uint64      `protobuf:"bytes,195,rep,name=mc3,proto3" json:"mc3,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Mc4           map[string]int32       `protobuf:"bytes,196,rep,name=mc4,proto3" json:"mc4,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	Mc5           map[string]int64       `protobuf:"bytes,197,rep,name=mc5,proto3" json:"mc5,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	Mc6           map[string]uint32      `protobuf:"bytes,198,rep,name=mc6,proto3" json:"mc6,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Mc7           map[string]uint64      `protobuf:"bytes,199,rep,name=mc7,proto3" json:"mc7,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Mc8           map[string]int32       `protobuf:"bytes,200,rep,name=mc8,proto3" json:"mc8,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Mc9           map[string]int64       `protobuf:"bytes,201,rep,name=mc9,proto3" json:"mc9,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Mca           map[string]float32     `protobuf:"bytes,202,rep,name=mca,proto3" json:"mca,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Mcb           map[string]float64     `protobuf:"bytes,203,rep,name=mcb,proto3" json:"mcb,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Mcc           map[string]bool        `protobuf:"bytes,204,rep,name=mcc,proto3" json:"mcc,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Mcd           map[string]Enum        `protobuf:"bytes,205,rep,name=mcd,proto3" json:"mcd,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=hyperpb.test.Enum"`
	Mce           map[string]string      `protobuf:"bytes,206,rep,name=mce,proto3" json:"mce,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Mcf           map[string][]byte      `protobuf:"bytes,207,rep,name=mcf,proto3" json:"mcf,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Maps) Reset() {
	*x = Maps{}
	mi := &file_test_test_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Maps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Maps) ProtoMessage() {}

func (x *Maps) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Maps.ProtoReflect.Descriptor instead.
func (*Maps) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{5}
}

func (x *Maps) GetM10() map[int32]int32 {
	if x != nil {
		return x.M10
	}
	return nil
}

func (x *Maps) GetM11() map[int32]int64 {
	if x != nil {
		return x.M11
	}
	return nil
}

func (x *Maps) GetM12() map[int32]uint32 {
	if x != nil {
		return x.M12
	}
	return nil
}

func (x *Maps) GetM13() map[int32]uint64 {
	if x != nil {
		return x.M13
	}
	return nil
}

func (x *Maps) GetM14() map[int32]int32 {
	if x != nil {
		return x.M14
	}
	return nil
}

func (x *Maps) GetM15() map[int32]int64 {
	if x != nil {
		return x.M15
	}
	return nil
}

func (x *Maps) GetM16() map[int32]uint32 {
	if x != nil {
		return x.M16
	}
	return nil
}

func (x *Maps) GetM17() map[int32]uint64 {
	if x != nil {
		return x.M17
	}
	return nil
}

func (x *Maps) GetM18() map[int32]int32 {
	if x != nil {
		return x.M18
	}
	return nil
}

func (x *Maps) GetM19() map[int32]int64 {
	if x != nil {
		return x.M19
	}
	return nil
}

func (x *Maps) GetM1A() map[int32]float32 {
	if x != nil {
		return x.M1A
	}
	return nil
}

func (x *Maps) GetM1B() map[int32]float64 {
	if x != nil {
		return x.M1B
	}
	return nil
}

func (x *Maps) GetM1C() map[int32]bool {
	if x != nil {
		return x.M1C
	}
	return nil
}

func (x *Maps) GetM1D() map[int32]Enum {
	if x != nil {
		return x.M1D
	}
	return nil
}

func (x *Maps) GetM1E() map[int32]string {
	if x != nil {
		return x.M1E
	}
	return nil
}

func (x *Maps) GetM1F() map[int32][]byte {
	if x != nil {
		return x.M1F
	}
	return nil
}

func (x *Maps) GetM20() map[int64]int32 {
	if x != nil {
		return x.M20
	}
	return nil
}

func (x *Maps) GetM21() map[int64]int64 {
	if x != nil {
		return x.M21
	}
	return nil
}

func (x *Maps) GetM22() map[int64]uint32 {
	if x != nil {
		return x.M22
	}
	return nil
}

func (x *Maps) GetM23() map[int64]uint64 {
	if x != nil {
		return x.M23
	}
	return nil
}

func (x *Maps) GetM24() map[int64]int32 {
	if x != nil {
		return x.M24
	}
	return nil
}

func (x *Maps) GetM25() map[int64]int64 {
	if x != nil {
		return x.M25
	}
	return nil
}

func (x *Maps) GetM26() map[int64]uint32 {
	if x != nil {
		return x.M26
	}
	return nil
}

func (x *Maps) GetM27() map[int64]uint64 {
	if x != nil {
		return x.M27
	}
	return nil
}

func (x *Maps) GetM28() map[int64]int32 {
	if x != nil {
		return x.M28
	}
	return nil
}

func (x *Maps) GetM29() map[int64]int64 {
	if x != nil {
		return x.M29
	}
	return nil
}

func (x *Maps) GetM2A() map[int64]float32 {
	if x != nil {
		return x.M2A
	}
	return nil
}

func (x *Maps) GetM2B() map[int64]float64 {
	if x != nil {
		return x.M2B
	}
	return nil
}

func (x *Maps) GetM2C() map[int64]bool {
	if x != nil {
		return x.M2C
	}
	return nil
}

func (x *Maps) GetM2D() map[int64]Enum {
	if x != nil {
		return x.M2D
	}
	return nil
}

func (x *Maps) GetM2E() map[int64]string {
	if x != nil {
		return x.M2E
	}
	return nil
}

func (x *Maps) GetM2F() map[int64][]byte {
	if x != nil {
		return x.M2F
	}
	return nil
}

func (x *Maps) GetM30() map[uint32]int32 {
	if x != nil {
		return x.M30
	}
	return nil
}

func (x *Maps) GetM31() map[uint32]int64 {
	if x != nil {
		return x.M31
	}
	return nil
}

func (x *Maps) GetM32() map[uint32]uint32 {
	if x != nil {
		return x.M32
	}
	return nil
}

func (x *Maps) GetM33() map[uint32]uint64 {
	if x != nil {
		return x.M33
	}
	return nil
}

func (x *Maps) GetM34() map[uint32]int32 {
	if x != nil {
		return x.M34
	}
	return nil
}

func (x *Maps) GetM35() map[uint32]int64 {
	if x != nil {
		return x.M35
	}
	return nil
}

func (x *Maps) GetM36() map[uint32]uint32 {
	if x != nil {
		return x.M36
	}
	return nil
}

func (x *Maps) GetM37() map[uint32]uint64 {
	if x != nil {
		return x.M37
	}
	return nil
}

func (x *Maps) GetM38() map[uint32]int32 {
	if x != nil {
		return x.M38
	}
	return nil
}

func (x *Maps) GetM39() map[uint32]int64 {
	if x != nil {
		return x.M39
	}
	return nil
}

func (x *Maps) GetM3A() map[uint32]float32 {
	if x != nil {
		return x.M3A
	}
	return nil
}

func (x *Maps) GetM3B() map[uint32]float64 {
	if x != nil {
		return x.M3B
	}
	return nil
}

func (x *Maps) GetM3C() map[uint32]bool {
	if x != nil {
		return x.M3C
	}
	return nil
}

func (x *Maps) GetM3D() map[uint32]Enum {
	if x != nil {
		return x.M3D
	}
	return nil
}

func (x *Maps) GetM3E() map[uint32]string {
	if x != nil {
		return x.M3E
	}
	return nil
}

func (x *Maps) GetM3F() map[uint32][]byte {
	if x != nil {
		return x.M3F
	}
	return nil
}

func (x *Maps) GetM40() map[uint64]int32 {
	if x != nil {
		return x.M40
	}
	return nil
}

func (x *Maps) GetM41() map[uint64]int64 {
	if x != nil {
		return x.M41
	}
	return nil
}

func (x *Maps) GetM42() map[uint64]uint32 {
	if x != nil {
		return x.M42
	}
	return nil
}

func (x *Maps) GetM43() map[uint64]uint64 {
	if x != nil {
		return x.M43
	}
	return nil
}

func (x *Maps) GetM44() map[uint64]int32 {
	if x != nil {
		return x.M44
	}
	return nil
}

func (x *Maps) GetM45() map[uint64]int64 {
	if x != nil {
		return x.M45
	}
	return nil
}

func (x *Maps) GetM46() map[uint64]uint32 {
	if x != nil {
		return x.M46
	}
	return nil
}

func (x *Maps) GetM47() map[uint64]uint64 {
	if x != nil {
		return x.M47
	}
	return nil
}

func (x *Maps) GetM48() map[uint64]int32 {
	if x != nil {
		return x.M48
	}
	return nil
}

func (x *Maps) GetM49() map[uint64]int64 {
	if x != nil {
		return x.M49
	}
	return nil
}

func (x *Maps) GetM4A() map[uint64]float32 {
	if x != nil {
		return x.M4A
	}
	return nil
}

func (x *Maps) GetM4B() map[uint64]float64 {
	if x != nil {
		return x.M4B
	}
	return nil
}

func (x *Maps) GetM4C() map[uint64]bool {
	if x != nil {
		return x.M4C
	}
	return nil
}

func (x *Maps) GetM4D() map[uint64]Enum {
	if x != nil {
		return x.M4D
	}
	return nil
}

func (x *Maps) GetM4E() map[uint64]string {
	if x != nil {
		return x.M4E
	}
	return nil
}

func (x *Maps) GetM4F() map[uint64][]byte {
	if x != nil {
		return x.M4F
	}
	return nil
}

func (x *Maps) GetM50() map[int32]int32 {
	if x != nil {
		return x.M50
	}
	return nil
}

func (x *Maps) GetM51() map[int32]int64 {
	if x != nil {
		return x.M51
	}
	return nil
}

func (x *Maps) GetM52() map[int32]uint32 {
	if x != nil {
		return x.M52
	}
	return nil
}

func (x *Maps) GetM53() map[int32]uint64 {
	if x != nil {
		return x.M53
	}
	return nil
}

func (x *Maps) GetM54() map[int32]int32 {
	if x != nil {
		return x.M54
	}
	return nil
}

func (x *Maps) GetM55() map[int32]int64 {
	if x != nil {
		return x.M55
	}
	return nil
}

func (x *Maps) GetM56() map[int32]uint32 {
	if x != nil {
		return x.M56
	}
	return nil
}

func (x *Maps) GetM57() map[int32]uint64 {
	if x != nil {
		return x.M57
	}
	return nil
}

func (x *Maps) GetM58() map[int32]int32 {
	if x != nil {
		return x.M58
	}
	return nil
}

func (x *Maps) GetM59() map[int32]int64 {
	if x != nil {
		return x.M59
	}
	return nil
}

func (x *Maps) GetM5A() map[int32]float32 {
	if x != nil {
		return x.M5A
	}
	return nil
}

func (x *Maps) GetM5B() map[int32]float64 {
	if x != nil {
		return x.M5B
	}
	return nil
}

func (x *Maps) GetM5C() map[int32]bool {
	if x != nil {
		return x.M5C
	}
	return nil
}

func (x *Maps) GetM5D() map[int32]Enum {
	if x != nil {
		return x.M5D
	}
	return nil
}

func (x *Maps) GetM5E() map[int32]string {
	if x != nil {
		return x.M5E
	}
	return nil
}

func (x *Maps) GetM5F() map[int32][]byte {
	if x != nil {
		return x.M5F
	}
	return nil
}

func (x *Maps) GetM60() map[int64]int32 {
	if x != nil {
		return x.M60
	}
	return nil
}

func (x *Maps) GetM61() map[int64]int64 {
	if x != nil {
		return x.M61
	}
	return nil
}

func (x *Maps) GetM62() map[int64]uint32 {
	if x != nil {
		return x.M62
	}
	return nil
}

func (x *Maps) GetM63() map[int64]uint64 {
	if x != nil {
		return x.M63
	}
	return nil
}

func (x *Maps) GetM64() map[int64]int32 {
	if x != nil {
		return x.M64
	}
	return nil
}

func (x *Maps) GetM65() map[int64]int64 {
	if x != nil {
		return x.M65
	}
	return nil
}

func (x *Maps) GetM66() map[int64]uint32 {
	if x != nil {
		return x.M66
	}
	return nil
}

func (x *Maps) GetM67() map[int64]uint64 {
	if x != nil {
		return x.M67
	}
	return nil
}

func (x *Maps) GetM68() map[int64]int32 {
	if x != nil {
		return x.M68
	}
	return nil
}

func (x *Maps) GetM69() map[int64]int64 {
	if x != nil {
		return x.M69
	}
	return nil
}

func (x *Maps) GetM6A() map[int64]float32 {
	if x != nil {
		return x.M6A
	}
	return nil
}

func (x *Maps) GetM6B() map[int64]float64 {
	if x != nil {
		return x.M6B
	}
	return nil
}

func (x *Maps) GetM6C() map[int64]bool {
	if x != nil {
		return x.M6C
	}
	return nil
}

func (x *Maps) GetM6D() map[int64]Enum {
	if x != nil {
		return x.M6D
	}
	return nil
}

func (x *Maps) GetM6E() map[int64]string {
	if x != nil {
		return x.M6E
	}
	return nil
}

func (x *Maps) GetM6F() map[int64][]byte {
	if x != nil {
		return x.M6F
	}
	return nil
}

func (x *Maps) GetM70() map[uint32]int32 {
	if x != nil {
		return x.M70
	}
	return nil
}

func (x *Maps) GetM71() map[uint32]int64 {
	if x != nil {
		return x.M71
	}
	return nil
}

func (x *Maps) GetM72() map[uint32]uint32 {
	if x != nil {
		return x.M72
	}
	return nil
}

func (x *Maps) GetM73() map[uint32]uint64 {
	if x != nil {
		return x.M73
	}
	return nil
}

func (x *Maps) GetM74() map[uint32]int32 {
	if x != nil {
		return x.M74
	}
	return nil
}

func (x *Maps) GetM75() map[uint32]int64 {
	if x != nil {
		return x.M75
	}
	return nil
}

func (x *Maps) GetM76() map[uint32]uint32 {
	if x != nil {
		return x.M76
	}
	return nil
}

func (x *Maps) GetM77() map[uint32]uint64 {
	if x != nil {
		return x.M77
	}
	return nil
}

func (x *Maps) GetM78() map[uint32]int32 {
	if x != nil {
		return x.M78
	}
	return nil
}

func (x *Maps) GetM79() map[uint32]int64 {
	if x != nil {
		return x.M79
	}
	return nil
}

func (x *Maps) GetM7A() map[uint32]float32 {
	if x != nil {
		return x.M7A
	}
	return nil
}

func (x *Maps) GetM7B() map[uint32]float64 {
	if x != nil {
		return x.M7B
	}
	return nil
}

func (x *Maps) GetM7C() map[uint32]bool {
	if x != nil {
		return x.M7C
	}
	return nil
}

func (x *Maps) GetM7D() map[uint32]Enum {
	if x != nil {
		return x.M7D
	}
	return nil
}

func (x *Maps) GetM7E() map[uint32]string {
	if x != nil {
		return x.M7E
	}
	return nil
}

func (x *Maps) GetM7F() map[uint32][]byte {
	if x != nil {
		return x.M7F
	}
	return nil
}

func (x *Maps) GetM80() map[uint64]int32 {
	if x != nil {
		return x.M80
	}
	return nil
}

func (x *Maps) GetM81() map[uint64]int64 {
	if x != nil {
		return x.M81
	}
	return nil
}

func (x *Maps) GetM82() map[uint64]uint32 {
	if x != nil {
		return x.M82
	}
	return nil
}

func (x *Maps) GetM83() map[uint64]uint64 {
	if x != nil {
		return x.M83
	}
	return nil
}

func (x *Maps) GetM84() map[uint64]int32 {
	if x != nil {
		return x.M84
	}
	return nil
}

func (x *Maps) GetM85() map[uint64]int64 {
	if x != nil {
		return x.M85
	}
	return nil
}

func (x *Maps) GetM86() map[uint64]uint32 {
	if x != nil {
		return x.M86
	}
	return nil
}

func (x *Maps) GetM87() map[uint64]uint64 {
	if x != nil {
		return x.M87
	}
	return nil
}

func (x *Maps) GetM88() map[uint64]int32 {
	if x != nil {
		return x.M88
	}
	return nil
}

func (x *Maps) GetM89() map[uint64]int64 {
	if x != nil {
		return x.M89
	}
	return nil
}

func (x *Maps) GetM8A() map[uint64]float32 {
	if x != nil {
		return x.M8A
	}
	return nil
}

func (x *Maps) GetM8B() map[uint64]float64 {
	if x != nil {
		return x.M8B
	}
	return nil
}

func (x *Maps) GetM8C() map[uint64]bool {
	if x != nil {
		return x.M8C
	}
	return nil
}

func (x *Maps) GetM8D() map[uint64]Enum {
	if x != nil {
		return x.M8D
	}
	return nil
}

func (x *Maps) GetM8E() map[uint64]string {
	if x != nil {
		return x.M8E
	}
	return nil
}

func (x *Maps) GetM8F() map[uint64][]byte {
	if x != nil {
		return x.M8F
	}
	return nil
}

func (x *Maps) GetM90() map[int32]int32 {
	if x != nil {
		return x.M90
	}
	return nil
}

func (x *Maps) GetM91() map[int32]int64 {
	if x != nil {
		return x.M91
	}
	return nil
}

func (x *Maps) GetM92() map[int32]uint32 {
	if x != nil {
		return x.M92
	}
	return nil
}

func (x *Maps) GetM93() map[int32]uint64 {
	if x != nil {
		return x.M93
	}
	return nil
}

func (x *Maps) GetM94() map[int32]int32 {
	if x != nil {
		return x.M94
	}
	return nil
}

func (x *Maps) GetM95() map[int32]int64 {
	if x != nil {
		return x.M95
	}
	return nil
}

func (x *Maps) GetM96() map[int32]uint32 {
	if x != nil {
		return x.M96
	}
	return nil
}

func (x *Maps) GetM97() map[int32]uint64 {
	if x != nil {
		return x.M97
	}
	return nil
}

func (x *Maps) GetM98() map[int32]int32 {
	if x != nil {
		return x.M98
	}
	return nil
}

func (x *Maps) GetM99() map[int32]int64 {
	if x != nil {
		return x.M99
	}
	return nil
}

func (x *Maps) GetM9A() map[int32]float32 {
	if x != nil {
		return x.M9A
	}
	return nil
}

func (x *Maps) GetM9B() map[int32]float64 {
	if x != nil {
		return x.M9B
	}
	return nil
}

func (x *Maps) GetM9C() map[int32]bool {
	if x != nil {
		return x.M9C
	}
	return nil
}

func (x *Maps) GetM9D() map[int32]Enum {
	if x != nil {
		return x.M9D
	}
	return nil
}

func (x *Maps) GetM9E() map[int32]string {
	if x != nil {
		return x.M9E
	}
	return nil
}

func (x *Maps) GetM9F() map[int32][]byte {
	if x != nil {
		return x.M9F
	}
	return nil
}

func (x *Maps) GetMa0() map[int64]int32 {
	if x != nil {
		return x.Ma0
	}
	return nil
}

func (x *Maps) GetMa1() map[int64]int64 {
	if x != nil {
		return x.Ma1
	}
	return nil
}

func (x *Maps) GetMa2() map[int64]uint32 {
	if x != nil {
		return x.Ma2
	}
	return nil
}

func (x *Maps) GetMa3() map[int64]uint64 {
	if x != nil {
		return x.Ma3
	}
	return nil
}

func (x *Maps) GetMa4() map[int64]int32 {
	if x != nil {
		return x.Ma4
	}
	return nil
}

func (x *Maps) GetMa5() map[int64]int64 {
	if x != nil {
		return x.Ma5
	}
	return nil
}

func (x *Maps) GetMa6() map[int64]uint32 {
	if x != nil {
		return x.Ma6
	}
	return nil
}

func (x *Maps) GetMa7() map[int64]uint64 {
	if x != nil {
		return x.Ma7
	}
	return nil
}

func (x *Maps) GetMa8() map[int64]int32 {
	if x != nil {
		return x.Ma8
	}
	return nil
}

func (x *Maps) GetMa9() map[int64]int64 {
	if x != nil {
		return x.Ma9
	}
	return nil
}

func (x *Maps) GetMaa() map[int64]float32 {
	if x != nil {
		return x.Maa
	}
	return nil
}

func (x *Maps) GetMab() map[int64]float64 {
	if x != nil {
		return x.Mab
	}
	return nil
}

func (x *Maps) GetMac() map[int64]bool {
	if x != nil {
		return x.Mac
	}
	return nil
}

func (x *Maps) GetMad() map[int64]Enum {
	if x != nil {
		return x.Mad
	}
	return nil
}

func (x *Maps) GetMae() map[int64]string {
	if x != nil {
		return x.Mae
	}
	return nil
}

func (x *Maps) GetMaf() map[int64][]byte {
	if x != nil {
		return x.Maf
	}
	return nil
}

func (x *Maps) GetMb0() map[bool]int32 {
	if x != nil {
		return x.Mb0
	}
	return nil
}

func (x *Maps) GetMb1() map[bool]int64 {
	if x != nil {
		return x.Mb1
	}
	return nil
}

func (x *Maps) GetMb2() map[bool]uint32 {
	if x != nil {
		return x.Mb2
	}
	return nil
}

func (x *Maps) GetMb3() map[bool]uint64 {
	if x != nil {
		return x.Mb3
	}
	return nil
}

func (x *Maps) GetMb4() map[bool]int32 {
	if x != nil {
		return x.Mb4
	}
	return nil
}

func (x *Maps) GetMb5() map[bool]int64 {
	if x != nil {
		return x.Mb5
	}
	return nil
}

func (x *Maps) GetMb6() map[bool]uint32 {
	if x != nil {
		return x.Mb6
	}
	return nil
}

func (x *Maps) GetMb7() map[bool]uint64 {
	if x != nil {
		return x.Mb7
	}
	return nil
}

func (x *Maps) GetMb8() map[bool]int32 {
	if x != nil {
		return x.Mb8
	}
	return nil
}

func (x *Maps) GetMb9() map[bool]int64 {
	if x != nil {
		return x.Mb9
	}
	return nil
}

func (x *Maps) GetMba() map[bool]float32 {
	if x != nil {
		return x.Mba
	}
	return nil
}

func (x *Maps) GetMbb() map[bool]float64 {
	if x != nil {
		return x.Mbb
	}
	return nil
}

func (x *Maps) GetMbc() map[bool]bool {
	if x != nil {
		return x.Mbc
	}
	return nil
}

func (x *Maps) GetMbd() map[bool]Enum {
	if x != nil {
		return x.Mbd
	}
	return nil
}

func (x *Maps) GetMbe() map[bool]string {
	if x != nil {
		return x.Mbe
	}
	return nil
}

func (x *Maps) GetMbf() map[bool][]byte {
	if x != nil {
		return x.Mbf
	}
	return nil
}

func (x *Maps) GetMc0() map[string]int32 {
	if x != nil {
		return x.Mc0
	}
	return nil
}

func (x *Maps) GetMc1() map[string]int64 {
	if x != nil {
		return x.Mc1
	}
	return nil
}

func (x *Maps) GetMc2() map[string]uint32 {
	if x != nil {
		return x.Mc2
	}
	return nil
}

func (x *Maps) GetMc3() map[string]uint64 {
	if x != nil {
		return x.Mc3
	}
	return nil
}

func (x *Maps) GetMc4() map[string]int32 {
	if x != nil {
		return x.Mc4
	}
	return nil
}

func (x *Maps) GetMc5() map[string]int64 {
	if x != nil {
		return x.Mc5
	}
	return nil
}

func (x *Maps) GetMc6() map[string]uint32 {
	if x != nil {
		return x.Mc6
	}
	return nil
}

func (x *Maps) GetMc7() map[string]uint64 {
	if x != nil {
		return x.Mc7
	}
	return nil
}

func (x *Maps) GetMc8() map[string]int32 {
	if x != nil {
		return x.Mc8
	}
	return nil
}

func (x *Maps) GetMc9() map[string]int64 {
	if x != nil {
		return x.Mc9
	}
	return nil
}

func (x *Maps) GetMca() map[string]float32 {
	if x != nil {
		return x.Mca
	}
	return nil
}

func (x *Maps) GetMcb() map[string]float64 {
	if x != nil {
		return x.Mcb
	}
	return nil
}

func (x *Maps) GetMcc() map[string]bool {
	if x != nil {
		return x.Mcc
	}
	return nil
}

func (x *Maps) GetMcd() map[string]Enum {
	if x != nil {
		return x.Mcd
	}
	return nil
}

func (x *Maps) GetMce() map[string]string {
	if x != nil {
		return x.Mce
	}
	return nil
}

func (x *Maps) GetMcf() map[string][]byte {
	if x != nil {
		return x.Mcf
	}
	return nil
}

type MessageMaps struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Scalars       *Scalars                `protobuf:"bytes,1,opt,name=scalars,proto3" json:"scalars,omitempty"`
	M1            map[int32]*MessageMaps  `protobuf:"bytes,17,rep,name=m1,proto3" json:"m1,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M2            map[int64]*MessageMaps  `protobuf:"bytes,18,rep,name=m2,proto3" json:"m2,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M3            map[uint32]*MessageMaps `protobuf:"bytes,19,rep,name=m3,proto3" json:"m3,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M4            map[uint64]*MessageMaps `protobuf:"bytes,20,rep,name=m4,proto3" json:"m4,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M5            map[int32]*MessageMaps  `protobuf:"bytes,21,rep,name=m5,proto3" json:"m5,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M6            map[int64]*MessageMaps  `protobuf:"bytes,22,rep,name=m6,proto3" json:"m6,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M7            map[uint32]*MessageMaps `protobuf:"bytes,23,rep,name=m7,proto3" json:"m7,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M8            map[uint64]*MessageMaps `protobuf:"bytes,24,rep,name=m8,proto3" json:"m8,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M9            map[int32]*MessageMaps  `protobuf:"bytes,25,rep,name=m9,proto3" json:"m9,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Ma            map[int64]*MessageMaps  `protobuf:"bytes,26,rep,name=ma,proto3" json:"ma,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Mc            map[string]*MessageMaps `protobuf:"bytes,28,rep,name=mc,proto3" json:"mc,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageMaps) Reset() {
	*x = MessageMaps{}
	mi := &file_test_test_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageMaps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageMaps) ProtoMessage() {}

func (x *MessageMaps) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageMaps.ProtoReflect.Descriptor instead.
func (*MessageMaps) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{6}
}

func (x *MessageMaps) GetScalars() *Scalars {
	if x != nil {
		return x.Scalars
	}
	return nil
}

func (x *MessageMaps) GetM1() map[int32]*MessageMaps {
	if x != nil {
		return x.M1
	}
	return nil
}

func (x *MessageMaps) GetM2() map[int64]*MessageMaps {
	if x != nil {
		return x.M2
	}
	return nil
}

func (x *MessageMaps) GetM3() map[uint32]*MessageMaps {
	if x != nil {
		return x.M3
	}
	return nil
}

func (x *MessageMaps) GetM4() map[uint64]*MessageMaps {
	if x != nil {
		return x.M4
	}
	return nil
}

func (x *MessageMaps) GetM5() map[int32]*MessageMaps {
	if x != nil {
		return x.M5
	}
	return nil
}

func (x *MessageMaps) GetM6() map[int64]*MessageMaps {
	if x != nil {
		return x.M6
	}
	return nil
}

func (x *MessageMaps) GetM7() map[uint32]*MessageMaps {
	if x != nil {
		return x.M7
	}
	return nil
}

func (x *MessageMaps) GetM8() map[uint64]*MessageMaps {
	if x != nil {
		return x.M8
	}
	return nil
}

func (x *MessageMaps) GetM9() map[int32]*MessageMaps {
	if x != nil {
		return x.M9
	}
	return nil
}

func (x *MessageMaps) GetMa() map[int64]*MessageMaps {
	if x != nil {
		return x.Ma
	}
	return nil
}

func (x *MessageMaps) GetMc() map[string]*MessageMaps {
	if x != nil {
		return x.Mc
	}
	return nil
}

// A message with a repeated message field that has many, many fields, but
// only one of which winds up being set.
type Pathological struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             []*Pathological_Inner  `protobuf:"bytes,1,rep,name=x,proto3" json:"x,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pathological) Reset() {
	*x = Pathological{}
	mi := &file_test_test_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pathological) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pathological) ProtoMessage() {}

func (x *Pathological) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pathological.ProtoReflect.Descriptor instead.
func (*Pathological) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{7}
}

func (x *Pathological) GetX() []*Pathological_Inner {
	if x != nil {
		return x.X
	}
	return nil
}

type Pathological_Inner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X1            int32                  `protobuf:"varint,1,opt,name=x1,proto3" json:"x1,omitempty"`
	X2            int32                  `protobuf:"varint,2,opt,name=x2,proto3" json:"x2,omitempty"`
	X3            int32                  `protobuf:"varint,3,opt,name=x3,proto3" json:"x3,omitempty"`
	X4            int32                  `protobuf:"varint,4,opt,name=x4,proto3" json:"x4,omitempty"`
	X5            int32                  `protobuf:"varint,5,opt,name=x5,proto3" json:"x5,omitempty"`
	X6            int32                  `protobuf:"varint,6,opt,name=x6,proto3" json:"x6,omitempty"`
	X7            int32                  `protobuf:"varint,7,opt,name=x7,proto3" json:"x7,omitempty"`
	X8            int32                  `protobuf:"varint,8,opt,name=x8,proto3" json:"x8,omitempty"`
	X9            int32                  `protobuf:"varint,9,opt,name=x9,proto3" json:"x9,omitempty"`
	Xa            int32                  `protobuf:"varint,10,opt,name=xa,proto3" json:"xa,omitempty"`
	Xb            int32                  `protobuf:"varint,11,opt,name=xb,proto3" json:"xb,omitempty"`
	Xc            int32                  `protobuf:"varint,12,opt,name=xc,proto3" json:"xc,omitempty"`
	Xd            int32                  `protobuf:"varint,13,opt,name=xd,proto3" json:"xd,omitempty"`
	Xe            int32                  `protobuf:"varint,14,opt,name=xe,proto3" json:"xe,omitempty"`
	Xf            int32                  `protobuf:"varint,15,opt,name=xf,proto3" json:"xf,omitempty"`
	Actual        string                 `protobuf:"bytes,100,opt,name=actual,proto3" json:"actual,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pathological_Inner) Reset() {
	*x = Pathological_Inner{}
	mi := &file_test_test_proto_msgTypes[211]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pathological_Inner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pathological_Inner) ProtoMessage() {}

func (x *Pathological_Inner) ProtoReflect() protoreflect.Message {
	mi := &file_test_test_proto_msgTypes[211]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pathological_Inner.ProtoReflect.Descriptor instead.
func (*Pathological_Inner) Descriptor() ([]byte, []int) {
	return file_test_test_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Pathological_Inner) GetX1() int32 {
	if x != nil {
		return x.X1
	}
	return 0
}

func (x *Pathological_Inner) GetX2() int32 {
	if x != nil {
		return x.X2
	}
	return 0
}

func (x *Pathological_Inner) GetX3() int32 {
	if x != nil {
		return x.X3
	}
	return 0
}

func (x *Pathological_Inner) GetX4() int32 {
	if x != nil {
		return x.X4
	}
	return 0
}

func (x *Pathological_Inner) GetX5() int32 {
	if x != nil {
		return x.X5
	}
	return 0
}

func (x *Pathological_Inner) GetX6() int32 {
	if x != nil {
		return x.X6
	}
	return 0
}

func (x *Pathological_Inner) GetX7() int32 {
	if x != nil {
		return x.X7
	}
	return 0
}

func (x *Pathological_Inner) GetX8() int32 {
	if x != nil {
		return x.X8
	}
	return 0
}

func (x *Pathological_Inner) GetX9() int32 {
	if x != nil {
		return x.X9
	}
	return 0
}

func (x *Pathological_Inner) GetXa() int32 {
	if x != nil {
		return x.Xa
	}
	return 0
}

func (x *Pathological_Inner) GetXb() int32 {
	if x != nil {
		return x.Xb
	}
	return 0
}

func (x *Pathological_Inner) GetXc() int32 {
	if x != nil {
		return x.Xc
	}
	return 0
}

func (x *Pathological_Inner) GetXd() int32 {
	if x != nil {
		return x.Xd
	}
	return 0
}

func (x *Pathological_Inner) GetXe() int32 {
	if x != nil {
		return x.Xe
	}
	return 0
}

func (x *Pathological_Inner) GetXf() int32 {
	if x != nil {
		return x.Xf
	}
	return 0
}

func (x *Pathological_Inner) GetActual() string {
	if x != nil {
		return x.Actual
	}
	return ""
}

var File_test_test_proto protoreflect.FileDescriptor

const file_test_test_proto_rawDesc = "" +
	"\n" +
	"\x0ftest/test.proto\x12\fhyperpb.test\"\xbb\x05\n" +
	"\aScalars\x12\x0e\n" +
	"\x02a1\x18\x01 \x01(\x05R\x02a1\x12\x0e\n" +
	"\x02a2\x18\x02 \x01(\x03R\x02a2\x12\x0e\n" +
	"\x02a3\x18\x03 \x01(\rR\x02a3\x12\x0e\n" +
	"\x02a4\x18\x04 \x01(\x04R\x02a4\x12\x0e\n" +
	"\x02a5\x18\x05 \x01(\x11R\x02a5\x12\x0e\n" +
	"\x02a6\x18\x06 \x01(\x12R\x02a6\x12\x0e\n" +
	"\x02a7\x18\a \x01(\aR\x02a7\x12\x0e\n" +
	"\x02a8\x18\b \x01(\x06R\x02a8\x12\x0e\n" +
	"\x02a9\x18\t \x01(\x0fR\x02a9\x12\x10\n" +
	"\x03a10\x18\n" +
	" \x01(\x10R\x03a10\x12\x10\n" +
	"\x03a11\x18\v \x01(\x02R\x03a11\x12\x10\n" +
	"\x03a12\x18\f \x01(\x01R\x03a12\x12\x10\n" +
	"\x03a13\x18\r \x01(\bR\x03a13\x12\x10\n" +
	"\x03a14\x18\x0e \x01(\tR\x03a14\x12\x10\n" +
	"\x03a15\x18\x0f \x01(\fR\x03a15\x12\x13\n" +
	"\x02b1\x18\x15 \x01(\x05H\x00R\x02b1\x88\x01\x01\x12\x13\n" +
	"\x02b2\x18\x16 \x01(\x03H\x01R\x02b2\x88\x01\x01\x12\x13\n" +
	"\x02b3\x18\x17 \x01(\rH\x02R\x02b3\x88\x01\x01\x12\x13\n" +
	"\x02b4\x18\x18 \x01(\x04H\x03R\x02b4\x88\x01\x01\x12\x13\n" +
	"\x02b5\x18\x19 \x01(\x11H\x04R\x02b5\x88\x01\x01\x12\x13\n" +
	"\x02b6\x18\x1a \x01(\x12H\x05R\x02b6\x88\x01\x01\x12\x13\n" +
	"\x02b7\x18\x1b \x01(\aH\x06R\x02b7\x88\x01\x01\x12\x13\n" +
	"\x02b8\x18\x1c \x01(\x06H\aR\x02b8\x88\x01\x01\x12\x13\n" +
	"\x02b9\x18\x1d \x01(\x0fH\bR\x02b9\x88\x01\x01\x12\x15\n" +
	"\x03b10\x18\x1e \x01(\x10H\tR\x03b10\x88\x01\x01\x12\x15\n" +
	"\x03b11\x18\x1f \x01(\x02H\n" +
	"R\x03b11\x88\x01\x01\x12\x15\n" +
	"\x03b12\x18  \x01(\x01H\vR\x03b12\x88\x01\x01\x12\x15\n" +
	"\x03b13\x18! \x01(\bH\fR\x03b13\x88\x01\x01\x12\x15\n" +
	"\x03b14\x18\" \x01(\tH\rR\x03b14\x88\x01\x01\x12\x15\n" +
	"\x03b15\x18# \x01(\fH\x0eR\x03b15\x88\x01\x01B\x05\n" +
	"\x03_b1B\x05\n" +
	"\x03_b2B\x05\n" +
	"\x03_b3B\x05\n" +
	"\x03_b4B\x05\n" +
	"\x03_b5B\x05\n" +
	"\x03_b6B\x05\n" +
	"\x03_b7B\x05\n" +
	"\x03_b8B\x05\n" +
	"\x03_b9B\x06\n" +
	"\x04_b10B\x06\n" +
	"\x04_b11B\x06\n" +
	"\x04_b12B\x06\n" +
	"\x04_b13B\x06\n" +
	"\x04_b14B\x06\n" +
	"\x04_b15\"\xb9\x01\n" +
	"\aNumbers\x12\x0e\n" +
	"\x02a1\x18\x01 \x01(\x05R\x02a1\x12\x0e\n" +
	"\x02a2\x18\x0f \x01(\x05R\x02a2\x12\x0e\n" +
	"\x02a3\x18\x10 \x01(\x05R\x02a3\x12\x0f\n" +
	"\x02a4\x18\xff\x0f \x01(\x05R\x02a4\x12\x0f\n" +
	"\x02a5\x18\x80\x10 \x01(\x05R\x02a5\x12\x10\n" +
	"\x02a6\x18\xff\xff\x0f \x01(\x05R\x02a6\x12\x10\n" +
	"\x02a7\x18\x80\x80\x10 \x01(\x05R\x02a7\x12\x11\n" +
	"\x02a8\x18\xff\xff\xff\x0f \x01(\x05R\x02a8\x12\x11\n" +
	"\x02a9\x18\x80\x80\x80\x10 \x01(\x05R\x02a9\x12\x12\n" +
	"\x02aa\x18\xff\xff\xff\xff\x01 \x01(\x05R\x02aa\"\x8a\x01\n" +
	"\bRepeated\x12\x0e\n" +
	"\x02r1\x18\x01 \x03(\x05R\x02r1\x12\x0e\n" +
	"\x02r2\x18\x02 \x03(\x03R\x02r2\x12\x0e\n" +
	"\x02r3\x18\x03 \x03(\x11R\x02r3\x12\x0e\n" +
	"\x02r4\x18\x04 \x03(\x12R\x02r4\x12\x0e\n" +
	"\x02r5\x18\x05 \x03(\aR\x02r5\x12\x0e\n" +
	"\x02r6\x18\x06 \x03(\x06R\x02r6\x12\x0e\n" +
	"\x02r7\x18\a \x03(\tR\x02r7\x12\x0e\n" +
	"\x02r8\x18\b \x03(\fR\x02r8\"[\n" +
	"\x05Graph\x12\f\n" +
	"\x01v\x18\x01 \x01(\x05R\x01v\x12!\n" +
	"\x01s\x18\x02 \x01(\v2\x13.hyperpb.test.GraphR\x01s\x12!\n" +
	"\x01r\x18\x03 \x03(\v2\x13.hyperpb.test.GraphR\x01r\"\x8b\x02\n" +
	"\x05Oneof\x12\x10\n" +
	"\x02s1\x18\x01 \x01(\x05H\x00R\x02s1\x12\x10\n" +
	"\x02m1\x18\v \x01(\x05H\x01R\x02m1\x12\x10\n" +
	"\x02m2\x18\f \x01(\x03H\x01R\x02m2\x12\x10\n" +
	"\x02m3\x18\r \x01(\x11H\x01R\x02m3\x12\x10\n" +
	"\x02m4\x18\x0e \x01(\x12H\x01R\x02m4\x12\x10\n" +
	"\x02m5\x18\x0f \x01(\aH\x01R\x02m5\x12\x10\n" +
	"\x02m6\x18\x10 \x01(\x06H\x01R\x02m6\x12\x10\n" +
	"\x02m7\x18\x11 \x01(\bH\x01R\x02m7\x12\x10\n" +
	"\x02m8\x18\x12 \x01(\tH\x01R\x02m8\x12\x10\n" +
	"\x02m9\x18\x13 \x01(\fH\x01R\x02m9\x12'\n" +
	"\x03m10\x18\x14 \x01(\v2\x13.hyperpb.test.OneofH\x01R\x03m10\x12\x12\n" +
	"\x04tail\x18\x1e \x01(\x05R\x04tailB\b\n" +
	"\x06singleB\a\n" +
	"\x05multi\"\x86\x9d\x01\n" +
	"\x04Maps\x12-\n" +
	"\x03m10\x18\x10 \x03(\v2\x1b.hyperpb.test.Maps.M10EntryR\x03m10\x12-\n" +
	"\x03m11\x18\x11 \x03(\v2\x1b.hyperpb.test.Maps.M11EntryR\x03m11\x12-\n" +
	"\x03m12\x18\x12 \x03(\v2\x1b.hyperpb.test.Maps.M12EntryR\x03m12\x12-\n" +
	"\x03m13\x18\x13 \x03(\v2\x1b.hyperpb.test.Maps.M13EntryR\x03m13\x12-\n" +
	"\x03m14\x18\x14 \x03(\v2\x1b.hyperpb.test.Maps.M14EntryR\x03m14\x12-\n" +
	"\x03m15\x18\x15 \x03(\v2\x1b.hyperpb.test.Maps.M15EntryR\x03m15\x12-\n" +
	"\x03m16\x18\x16 \x03(\v2\x1b.hyperpb.test.Maps.M16EntryR\x03m16\x12-\n" +
	"\x03m17\x18\x17 \x03(\v2\x1b.hyperpb.test.Maps.M17EntryR\x03m17\x12-\n" +
	"\x03m18\x18\x18 \x03(\v2\x1b.hyperpb.test.Maps.M18EntryR\x03m18\x12-\n" +
	"\x03m19\x18\x19 \x03(\v2\x1b.hyperpb.test.Maps.M19EntryR\x03m19\x12-\n" +
	"\x03m1a\x18\x1a \x03(\v2\x1b.hyperpb.test.Maps.M1aEntryR\x03m1a\x12-\n" +
	"\x03m1b\x18\x1b \x03(\v2\x1b.hyperpb.test.Maps.M1bEntryR\x03m1b\x12-\n" +
	"\x03m1c\x18\x1c \x03(\v2\x1b.hyperpb.test.Maps.M1cEntryR\x03m1c\x12-\n" +
	"\x03m1d\x18\x1d \x03(\v2\x1b.hyperpb.test.Maps.M1dEntryR\x03m1d\x12-\n" +
	"\x03m1e\x18\x1e \x03(\v2\x1b.hyperpb.test.Maps.M1eEntryR\x03m1e\x12-\n" +
	"\x03m1f\x18\x1f \x03(\v2\x1b.hyperpb.test.Maps.M1fEntryR\x03m1f\x12-\n" +
	"\x03m20\x18  \x03(\v2\x1b.hyperpb.test.Maps.M20EntryR\x03m20\x12-\n" +
	"\x03m21\x18! \x03(\v2\x1b.hyperpb.test.Maps.M21EntryR\x03m21\x12-\n" +
	"\x03m22\x18\" \x03(\v2\x1b.hyperpb.test.Maps.M22EntryR\x03m22\x12-\n" +
	"\x03m23\x18# \x03(\v2\x1b.hyperpb.test.Maps.M23EntryR\x03m23\x12-\n" +
	"\x03m24\x18$ \x03(\v2\x1b.hyperpb.test.Maps.M24EntryR\x03m24\x12-\n" +
	"\x03m25\x18% \x03(\v2\x1b.hyperpb.test.Maps.M25EntryR\x03m25\x12-\n" +
	"\x03m26\x18& \x03(\v2\x1b.hyperpb.test.Maps.M26EntryR\x03m26\x12-\n" +
	"\x03m27\x18' \x03(\v2\x1b.hyperpb.test.Maps.M27EntryR\x03m27\x12-\n" +
	"\x03m28\x18( \x03(\v2\x1b.hyperpb.test.Maps.M28EntryR\x03m28\x12-\n" +
	"\x03m29\x18) \x03(\v2\x1b.hyperpb.test.Maps.M29EntryR\x03m29\x12-\n" +
	"\x03m2a\x18* \x03(\v2\x1b.hyperpb.test.Maps.M2aEntryR\x03m2a\x12-\n" +
	"\x03m2b\x18+ \x03(\v2\x1b.hyperpb.test.Maps.M2bEntryR\x03m2b\x12-\n" +
	"\x03m2c\x18, \x03(\v2\x1b.hyperpb.test.Maps.M2cEntryR\x03m2c\x12-\n" +
	"\x03m2d\x18- \x03(\v2\x1b.hyperpb.test.Maps.M2dEntryR\x03m2d\x12-\n" +
	"\x03m2e\x18. \x03(\v2\x1b.hyperpb.test.Maps.M2eEntryR\x03m2e\x12-\n" +
	"\x03m2f\x18/ \x03(\v2\x1b.hyperpb.test.Maps.M2fEntryR\x03m2f\x12-\n" +
	"\x03m30\x180 \x03(\v2\x1b.hyperpb.test.Maps.M30EntryR\x03m30\x12-\n" +
	"\x03m31\x181 \x03(\v2\x1b.hyperpb.test.Maps.M31EntryR\x03m31\x12-\n" +
	"\x03m32\x182 \x03(\v2\x1b.hyperpb.test.Maps.M32EntryR\x03m32\x12-\n" +
	"\x03m33\x183 \x03(\v2\x1b.hyperpb.test.Maps.M33EntryR\x03m33\x12-\n" +
	"\x03m34\x184 \x03(\v2\x1b.hyperpb.test.Maps.M34EntryR\x03m34\x12-\n" +
	"\x03m35\x185 \x03(\v2\x1b.hyperpb.test.Maps.M35EntryR\x03m35\x12-\n" +
	"\x03m36\x186 \x03(\v2\x1b.hyperpb.test.Maps.M36EntryR\x03m36\x12-\n" +
	"\x03m37\x187 \x03(\v2\x1b.hyperpb.test.Maps.M37EntryR\x03m37\x12-\n" +
	"\x03m38\x188 \x03(\v2\x1b.hyperpb.test.Maps.M38EntryR\x03m38\x12-\n" +
	"\x03m39\x189 \x03(\v2\x1b.hyperpb.test.Maps.M39EntryR\x03m39\x12-\n" +
	"\x03m3a\x18: \x03(\v2\x1b.hyperpb.test.Maps.M3aEntryR\x03m3a\x12-\n" +
	"\x03m3b\x18; \x03(\v2\x1b.hyperpb.test.Maps.M3bEntryR\x03m3b\x12-\n" +
	"\x03m3c\x18< \x03(\v2\x1b.hyperpb.test.Maps.M3cEntryR\x03m3c\x12-\n" +
	"\x03m3d\x18= \x03(\v2\x1b.hyperpb.test.Maps.M3dEntryR\x03m3d\x12-\n" +
	"\x03m3e\x18> \x03(\v2\x1b.hyperpb.test.Maps.M3eEntryR\x03m3e\x12-\n" +
	"\x03m3f\x18? \x03(\v2\x1b.hyperpb.test.Maps.M3fEntryR\x03m3f\x12-\n" +
	"\x03m40\x18@ \x03(\v2\x1b.hyperpb.test.Maps.M40EntryR\x03m40\x12-\n" +
	"\x03m41\x18A \x03(\v2\x1b.hyperpb.test.Maps.M41EntryR\x03m41\x12-\n" +
	"\x03m42\x18B \x03(\v2\x1b.hyperpb.test.Maps.M42EntryR\x03m42\x12-\n" +
	"\x03m43\x18C \x03(\v2\x1b.hyperpb.test.Maps.M43EntryR\x03m43\x12-\n" +
	"\x03m44\x18D \x03(\v2\x1b.hyperpb.test.Maps.M44EntryR\x03m44\x12-\n" +
	"\x03m45\x18E \x03(\v2\x1b.hyperpb.test.Maps.M45EntryR\x03m45\x12-\n" +
	"\x03m46\x18F \x03(\v2\x1b.hyperpb.test.Maps.M46EntryR\x03m46\x12-\n" +
	"\x03m47\x18G \x03(\v2\x1b.hyperpb.test.Maps.M47EntryR\x03m47\x12-\n" +
	"\x03m48\x18H \x03(\v2\x1b.hyperpb.test.Maps.M48EntryR\x03m48\x12-\n" +
	"\x03m49\x18I \x03(\v2\x1b.hyperpb.test.Maps.M49EntryR\x03m49\x12-\n" +
	"\x03m4a\x18J \x03(\v2\x1b.hyperpb.test.Maps.M4aEntryR\x03m4a\x12-\n" +
	"\x03m4b\x18K \x03(\v2\x1b.hyperpb.test.Maps.M4bEntryR\x03m4b\x12-\n" +
	"\x03m4c\x18L \x03(\v2\x1b.hyperpb.test.Maps.M4cEntryR\x03m4c\x12-\n" +
	"\x03m4d\x18M \x03(\v2\x1b.hyperpb.test.Maps.M4dEntryR\x03m4d\x12-\n" +
	"\x03m4e\x18N \x03(\v2\x1b.hyperpb.test.Maps.M4eEntryR\x03m4e\x12-\n" +
	"\x03m4f\x18O \x03(\v2\x1b.hyperpb.test.Maps.M4fEntryR\x03m4f\x12-\n" +
	"\x03m50\x18P \x03(\v2\x1b.hyperpb.test.Maps.M50EntryR\x03m50\x12-\n" +
	"\x03m51\x18Q \x03(\v2\x1b.hyperpb.test.Maps.M51EntryR\x03m51\x12-\n" +
	"\x03m52\x18R \x03(\v2\x1b.hyperpb.test.Maps.M52EntryR\x03m52\x12-\n" +
	"\x03m53\x18S \x03(\v2\x1b.hyperpb.test.Maps.M53EntryR\x03m53\x12-\n" +
	"\x03m54\x18T \x03(\v2\x1b.hyperpb.test.Maps.M54EntryR\x03m54\x12-\n" +
	"\x03m55\x18U \x03(\v2\x1b.hyperpb.test.Maps.M55EntryR\x03m55\x12-\n" +
	"\x03m56\x18V \x03(\v2\x1b.hyperpb.test.Maps.M56EntryR\x03m56\x12-\n" +
	"\x03m57\x18W \x03(\v2\x1b.hyperpb.test.Maps.M57EntryR\x03m57\x12-\n" +
	"\x03m58\x18X \x03(\v2\x1b.hyperpb.test.Maps.M58EntryR\x03m58\x12-\n" +
	"\x03m59\x18Y \x03(\v2\x1b.hyperpb.test.Maps.M59EntryR\x03m59\x12-\n" +
	"\x03m5a\x18Z \x03(\v2\x1b.hyperpb.test.Maps.M5aEntryR\x03m5a\x12-\n" +
	"\x03m5b\x18[ \x03(\v2\x1b.hyperpb.test.Maps.M5bEntryR\x03m5b\x12-\n" +
	"\x03m5c\x18\\ \x03(\v2\x1b.hyperpb.test.Maps.M5cEntryR\x03m5c\x12-\n" +
	"\x03m5d\x18] \x03(\v2\x1b.hyperpb.test.Maps.M5dEntryR\x03m5d\x12-\n" +
	"\x03m5e\x18^ \x03(\v2\x1b.hyperpb.test.Maps.M5eEntryR\x03m5e\x12-\n" +
	"\x03m5f\x18_ \x03(\v2\x1b.hyperpb.test.Maps.M5fEntryR\x03m5f\x12-\n" +
	"\x03m60\x18` \x03(\v2\x1b.hyperpb.test.Maps.M60EntryR\x03m60\x12-\n" +
	"\x03m61\x18a \x03(\v2\x1b.hyperpb.test.Maps.M61EntryR\x03m61\x12-\n" +
	"\x03m62\x18b \x03(\v2\x1b.hyperpb.test.Maps.M62EntryR\x03m62\x12-\n" +
	"\x03m63\x18c \x03(\v2\x1b.hyperpb.test.Maps.M63EntryR\x03m63\x12-\n" +
	"\x03m64\x18d \x03(\v2\x1b.hyperpb.test.Maps.M64EntryR\x03m64\x12-\n" +
	"\x03m65\x18e \x03(\v2\x1b.hyperpb.test.Maps.M65EntryR\x03m65\x12-\n" +
	"\x03m66\x18f \x03(\v2\x1b.hyperpb.test.Maps.M66EntryR\x03m66\x12-\n" +
	"\x03m67\x18g \x03(\v2\x1b.hyperpb.test.Maps.M67EntryR\x03m67\x12-\n" +
	"\x03m68\x18h \x03(\v2\x1b.hyperpb.test.Maps.M68EntryR\x03m68\x12-\n" +
	"\x03m69\x18i \x03(\v2\x1b.hyperpb.test.Maps.M69EntryR\x03m69\x12-\n" +
	"\x03m6a\x18j \x03(\v2\x1b.hyperpb.test.Maps.M6aEntryR\x03m6a\x12-\n" +
	"\x03m6b\x18k \x03(\v2\x1b.hyperpb.test.Maps.M6bEntryR\x03m6b\x12-\n" +
	"\x03m6c\x18l \x03(\v2\x1b.hyperpb.test.Maps.M6cEntryR\x03m6c\x12-\n" +
	"\x03m6d\x18m \x03(\v2\x1b.hyperpb.test.Maps.M6dEntryR\x03m6d\x12-\n" +
	"\x03m6e\x18n \x03(\v2\x1b.hyperpb.test.Maps.M6eEntryR\x03m6e\x12-\n" +
	"\x03m6f\x18o \x03(\v2\x1b.hyperpb.test.Maps.M6fEntryR\x03m6f\x12-\n" +
	"\x03m70\x18p \x03(\v2\x1b.hyperpb.test.Maps.M70EntryR\x03m70\x12-\n" +
	"\x03m71\x18q \x03(\v2\x1b.hyperpb.test.Maps.M71EntryR\x03m71\x12-\n" +
	"\x03m72\x18r \x03(\v2\x1b.hyperpb.test.Maps.M72EntryR\x03m72\x12-\n" +
	"\x03m73\x18s \x03(\v2\x1b.hyperpb.test.Maps.M73EntryR\x03m73\x12-\n" +
	"\x03m74\x18t \x03(\v2\x1b.hyperpb.test.Maps.M74EntryR\x03m74\x12-\n" +
	"\x03m75\x18u \x03(\v2\x1b.hyperpb.test.Maps.M75EntryR\x03m75\x12-\n" +
	"\x03m76\x18v \x03(\v2\x1b.hyperpb.test.Maps.M76EntryR\x03m76\x12-\n" +
	"\x03m77\x18w \x03(\v2\x1b.hyperpb.test.Maps.M77EntryR\x03m77\x12-\n" +
	"\x03m78\x18x \x03(\v2\x1b.hyperpb.test.Maps.M78EntryR\x03m78\x12-\n" +
	"\x03m79\x18y \x03(\v2\x1b.hyperpb.test.Maps.M79EntryR\x03m79\x12-\n" +
	"\x03m7a\x18z \x03(\v2\x1b.hyperpb.test.Maps.M7aEntryR\x03m7a\x12-\n" +
	"\x03m7b\x18{ \x03(\v2\x1b.hyperpb.test.Maps.M7bEntryR\x03m7b\x12-\n" +
	"\x03m7c\x18| \x03(\v2\x1b.hyperpb.test.Maps.M7cEntryR\x03m7c\x12-\n" +
	"\x03m7d\x18} \x03(\v2\x1b.hyperpb.test.Maps.M7dEntryR\x03m7d\x12-\n" +
	"\x03m7e\x18~ \x03(\v2\x1b.hyperpb.test.Maps.M7eEntryR\x03m7e\x12-\n" +
	"\x03m7f\x18\x7f \x03(\v2\x1b.hyperpb.test.Maps.M7fEntryR\x03m7f\x12.\n" +
	"\x03m80\x18\x80\x01 \x03(\v2\x1b.hyperpb.test.Maps.M80EntryR\x03m80\x12.\n" +
	"\x03m81\x18\x81\x01 \x03(\v2\x1b.hyperpb.test.Maps.M81EntryR\x03m81\x12.\n" +
	"\x03m82\x18\x82\x01 \x03(\v2\x1b.hyperpb.test.Maps.M82EntryR\x03m82\x12.\n" +
	"\x03m83\x18\x83\x01 \x03(\v2\x1b.hyperpb.test.Maps.M83EntryR\x03m83\x12.\n" +
	"\x03m84\x18\x84\x01 \x03(\v2\x1b.hyperpb.test.Maps.M84EntryR\x03m84\x12.\n" +
	"\x03m85\x18\x85\x01 \x03(\v2\x1b.hyperpb.test.Maps.M85EntryR\x03m85\x12.\n" +
	"\x03m86\x18\x86\x01 \x03(\v2\x1b.hyperpb.test.Maps.M86EntryR\x03m86\x12.\n" +
	"\x03m87\x18\x87\x01 \x03(\v2\x1b.hyperpb.test.Maps.M87EntryR\x03m87\x12.\n" +
	"\x03m88\x18\x88\x01 \x03(\v2\x1b.hyperpb.test.Maps.M88EntryR\x03m88\x12.\n" +
	"\x03m89\x18\x89\x01 \x03(\v2\x1b.hyperpb.test.Maps.M89EntryR\x03m89\x12.\n" +
	"\x03m8a\x18\x8a\x01 \x03(\v2\x1b.hyperpb.test.Maps.M8aEntryR\x03m8a\x12.\n" +
	"\x03m8b\x18\x8b\x01 \x03(\v2\x1b.hyperpb.test.Maps.M8bEntryR\x03m8b\x12.\n" +
	"\x03m8c\x18\x8c\x01 \x03(\v2\x1b.hyperpb.test.Maps.M8cEntryR\x03m8c\x12.\n" +
	"\x03m8d\x18\x8d\x01 \x03(\v2\x1b.hyperpb.test.Maps.M8dEntryR\x03m8d\x12.\n" +
	"\x03m8e\x18\x8e\x01 \x03(\v2\x1b.hyperpb.test.Maps.M8eEntryR\x03m8e\x12.\n" +
	"\x03m8f\x18\x8f\x01 \x03(\v2\x1b.hyperpb.test.Maps.M8fEntryR\x03m8f\x12.\n" +
	"\x03m90\x18\x90\x01 \x03(\v2\x1b.hyperpb.test.Maps.M90EntryR\x03m90\x12.\n" +
	"\x03m91\x18\x91\x01 \x03(\v2\x1b.hyperpb.test.Maps.M91EntryR\x03m91\x12.\n" +
	"\x03m92\x18\x92\x01 \x03(\v2\x1b.hyperpb.test.Maps.M92EntryR\x03m92\x12.\n" +
	"\x03m93\x18\x93\x01 \x03(\v2\x1b.hyperpb.test.Maps.M93EntryR\x03m93\x12.\n" +
	"\x03m94\x18\x94\x01 \x03(\v2\x1b.hyperpb.test.Maps.M94EntryR\x03m94\x12.\n" +
	"\x03m95\x18\x95\x01 \x03(\v2\x1b.hyperpb.test.Maps.M95EntryR\x03m95\x12.\n" +
	"\x03m96\x18\x96\x01 \x03(\v2\x1b.hyperpb.test.Maps.M96EntryR\x03m96\x12.\n" +
	"\x03m97\x18\x97\x01 \x03(\v2\x1b.hyperpb.test.Maps.M97EntryR\x03m97\x12.\n" +
	"\x03m98\x18\x98\x01 \x03(\v2\x1b.hyperpb.test.Maps.M98EntryR\x03m98\x12.\n" +
	"\x03m99\x18\x99\x01 \x03(\v2\x1b.hyperpb.test.Maps.M99EntryR\x03m99\x12.\n" +
	"\x03m9a\x18\x9a\x01 \x03(\v2\x1b.hyperpb.test.Maps.M9aEntryR\x03m9a\x12.\n" +
	"\x03m9b\x18\x9b\x01 \x03(\v2\x1b.hyperpb.test.Maps.M9bEntryR\x03m9b\x12.\n" +
	"\x03m9c\x18\x9c\x01 \x03(\v2\x1b.hyperpb.test.Maps.M9cEntryR\x03m9c\x12.\n" +
	"\x03m9d\x18\x9d\x01 \x03(\v2\x1b.hyperpb.test.Maps.M9dEntryR\x03m9d\x12.\n" +
	"\x03m9e\x18\x9e\x01 \x03(\v2\x1b.hyperpb.test.Maps.M9eEntryR\x03m9e\x12.\n" +
	"\x03m9f\x18\x9f\x01 \x03(\v2\x1b.hyperpb.test.Maps.M9fEntryR\x03m9f\x12.\n" +
	"\x03ma0\x18\xa0\x01 \x03(\v2\x1b.hyperpb.test.Maps.Ma0EntryR\x03ma0\x12.\n" +
	"\x03ma1\x18\xa1\x01 \x03(\v2\x1b.hyperpb.test.Maps.Ma1EntryR\x03ma1\x12.\n" +
	"\x03ma2\x18\xa2\x01 \x03(\v2\x1b.hyperpb.test.Maps.Ma2EntryR\x03ma2\x12.\n" +
	"\x03ma3\x18\xa3\x01 \x03(\v2\x1b.hyperpb.test.Maps.Ma3EntryR\x03ma3\x12.\n" +
	"\x03ma4\x18\xa4\x01 \x03(\v2\x1b.hyperpb.test.Maps.Ma4EntryR\x03ma4\x12.\n" +
	"\x03ma5\x18\xa5\x01 \x03(\v2\x1b.hyperpb.test.Maps.Ma5EntryR\x03ma5\x12.\n" +
	"\x03ma6\x18\xa6\x01 \x03(\v2\x1b.hyperpb.test.Maps.Ma6EntryR\x03ma6\x12.\n" +
	"\x03ma7\x18\xa7\x01 \x03(\v2\x1b.hyperpb.test.Maps.Ma7EntryR\x03ma7\x12.\n" +
	"\x03ma8\x18\xa8\x01 \x03(\v2\x1b.hyperpb.test.Maps.Ma8EntryR\x03ma8\x12.\n" +
	"\x03ma9\x18\xa9\x01 \x03(\v2\x1b.hyperpb.test.Maps.Ma9EntryR\x03ma9\x12.\n" +
	"\x03maa\x18\xaa\x01 \x03(\v2\x1b.hyperpb.test.Maps.MaaEntryR\x03maa\x12.\n" +
	"\x03mab\x18\xab\x01 \x03(\v2\x1b.hyperpb.test.Maps.MabEntryR\x03mab\x12.\n" +
	"\x03mac\x18\xac\x01 \x03(\v2\x1b.hyperpb.test.Maps.MacEntryR\x03mac\x12.\n" +
	"\x03mad\x18\xad\x01 \x03(\v2\x1b.hyperpb.test.Maps.MadEntryR\x03mad\x12.\n" +
	"\x03mae\x18\xae\x01 \x03(\v2\x1b.hyperpb.test.Maps.MaeEntryR\x03mae\x12.\n" +
	"\x03maf\x18\xaf\x01 \x03(\v2\x1b.hyperpb.test.Maps.MafEntryR\x03maf\x12.\n" +
	"\x03mb0\x18\xb0\x01 \x03(\v2\x1b.hyperpb.test.Maps.Mb0EntryR\x03mb0\x12.\n" +
	"\x03mb1\x18\xb1\x01 \x03(\v2\x1b.hyperpb.test.Maps.Mb1EntryR\x03mb1\x12.\n" +
	"\x03mb2\x18\xb2\x01 \x03(\v2\x1b.hyperpb.test.Maps.Mb2EntryR\x03mb2\x12.\n" +
	"\x03mb3\x18\xb3\x01 \x03(\v2\x1b.hyperpb.test.Maps.Mb3EntryR\x03mb3\x12.\n" +
	"\x03mb4\x18\xb4\x01 \x03(\v2\x1b.hyperpb.test.Maps.Mb4EntryR\x03mb4\x12.\n" +
	"\x03mb5\x18\xb5\x01 \x03(\v2\x1b.hyperpb.test.Maps.Mb5EntryR\x03mb5\x12.\n" +
	"\x03mb6\x18\xb6\x01 \x03(\v2\x1b.hyperpb.test.Maps.Mb6EntryR\x03mb6\x12.\n" +
	"\x03mb7\x18\xb7\x01 \x03(\v2\x1b.hyperpb.test.Maps.Mb7EntryR\x03mb7\x12.\n" +
	"\x03mb8\x18\xb8\x01 \x03(\v2\x1b.hyperpb.test.Maps.Mb8EntryR\x03mb8\x12.\n" +
	"\x03mb9\x18\xb9\x01 \x03(\v2\x1b.hyperpb.test.Maps.Mb9EntryR\x03mb9\x12.\n" +
	"\x03mba\x18\xba\x01 \x03(\v2\x1b.hyperpb.test.Maps.MbaEntryR\x03mba\x12.\n" +
	"\x03mbb\x18\xbb\x01 \x03(\v2\x1b.hyperpb.test.Maps.MbbEntryR\x03mbb\x12.\n" +
	"\x03mbc\x18\xbc\x01 \x03(\v2\x1b.hyperpb.test.Maps.MbcEntryR\x03mbc\x12.\n" +
	"\x03mbd\x18\xbd\x01 \x03(\v2\x1b.hyperpb.test.Maps.MbdEntryR\x03mbd\x12.\n" +
	"\x03mbe\x18\xbe\x01 \x03(\v2\x1b.hyperpb.test.Maps.MbeEntryR\x03mbe\x12.\n" +
	"\x03mbf\x18\xbf\x01 \x03(\v2\x1b.hyperpb.test.Maps.MbfEntryR\x03mbf\x12.\n" +
	"\x03mc0\x18\xc0\x01 \x03(\v2\x1b.hyperpb.test.Maps.Mc0EntryR\x03mc0\x12.\n" +
	"\x03mc1\x18\xc1\x01 \x03(\v2\x1b.hyperpb.test.Maps.Mc1EntryR\x03mc1\x12.\n" +
	"\x03mc2\x18\xc2\x01 \x03(\v2\x1b.hyperpb.test.Maps.Mc2EntryR\x03mc2\x12.\n" +
	"\x03mc3\x18\xc3\x01 \x03(\v2\x1b.hyperpb.test.Maps.Mc3EntryR\x03mc3\x12.\n" +
	"\x03mc4\x18\xc4\x01 \x03(\v2\x1b.hyperpb.test.Maps.Mc4EntryR\x03mc4\x12.\n" +
	"\x03mc5\x18\xc5\x01 \x03(\v2\x1b.hyperpb.test.Maps.Mc5EntryR\x03mc5\x12.\n" +
	"\x03mc6\x18\xc6\x01 \x03(\v2\x1b.hyperpb.test.Maps.Mc6EntryR\x03mc6\x12.\n" +
	"\x03mc7\x18\xc7\x01 \x03(\v2\x1b.hyperpb.test.Maps.Mc7EntryR\x03mc7\x12.\n" +
	"\x03mc8\x18\xc8\x01 \x03(\v2\x1b.hyperpb.test.Maps.Mc8EntryR\x03mc8\x12.\n" +
	"\x03mc9\x18\xc9\x01 \x03(\v2\x1b.hyperpb.test.Maps.Mc9EntryR\x03mc9\x12.\n" +
	"\x03mca\x18\xca\x01 \x03(\v2\x1b.hyperpb.test.Maps.McaEntryR\x03mca\x12.\n" +
	"\x03mcb\x18\xcb\x01 \x03(\v2\x1b.hyperpb.test.Maps.McbEntryR\x03mcb\x12.\n" +
	"\x03mcc\x18\xcc\x01 \x03(\v2\x1b.hyperpb.test.Maps.MccEntryR\x03mcc\x12.\n" +
	"\x03mcd\x18\xcd\x01 \x03(\v2\x1b.hyperpb.test.Maps.McdEntryR\x03mcd\x12.\n" +
	"\x03mce\x18\xce\x01 \x03(\v2\x1b.hyperpb.test.Maps.MceEntryR\x03mce\x12.\n" +
	"\x03mcf\x18\xcf\x01 \x03(\v2\x1b.hyperpb.test.Maps.McfEntryR\x03mcf\x1a6\n" +
	"\bM10Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a6\n" +
	"\bM11Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1a6\n" +
	"\bM12Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1a6\n" +
	"\bM13Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1a6\n" +
	"\bM14Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x11R\x05value:\x028\x01\x1a6\n" +
	"\bM15Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x12R\x05value:\x028\x01\x1a6\n" +
	"\bM16Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\aR\x05value:\x028\x01\x1a6\n" +
	"\bM17Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x06R\x05value:\x028\x01\x1a6\n" +
	"\bM18Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x0fR\x05value:\x028\x01\x1a6\n" +
	"\bM19Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x10R\x05value:\x028\x01\x1a6\n" +
	"\bM1aEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\x1a6\n" +
	"\bM1bEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1a6\n" +
	"\bM1cEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1aJ\n" +
	"\bM1dEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\x0e2\x12.hyperpb.test.EnumR\x05value:\x028\x01\x1a6\n" +
	"\bM1eEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a6\n" +
	"\bM1fEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1a6\n" +
	"\bM20Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a6\n" +
	"\bM21Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1a6\n" +
	"\bM22Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1a6\n" +
	"\bM23Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1a6\n" +
	"\bM24Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x11R\x05value:\x028\x01\x1a6\n" +
	"\bM25Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x12R\x05value:\x028\x01\x1a6\n" +
	"\bM26Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\aR\x05value:\x028\x01\x1a6\n" +
	"\bM27Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x06R\x05value:\x028\x01\x1a6\n" +
	"\bM28Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x0fR\x05value:\x028\x01\x1a6\n" +
	"\bM29Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x10R\x05value:\x028\x01\x1a6\n" +
	"\bM2aEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\x1a6\n" +
	"\bM2bEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1a6\n" +
	"\bM2cEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1aJ\n" +
	"\bM2dEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\x0e2\x12.hyperpb.test.EnumR\x05value:\x028\x01\x1a6\n" +
	"\bM2eEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a6\n" +
	"\bM2fEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1a6\n" +
	"\bM30Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a6\n" +
	"\bM31Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1a6\n" +
	"\bM32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1a6\n" +
	"\bM33Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1a6\n" +
	"\bM34Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x11R\x05value:\x028\x01\x1a6\n" +
	"\bM35Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x12R\x05value:\x028\x01\x1a6\n" +
	"\bM36Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\aR\x05value:\x028\x01\x1a6\n" +
	"\bM37Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x06R\x05value:\x028\x01\x1a6\n" +
	"\bM38Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x0fR\x05value:\x028\x01\x1a6\n" +
	"\bM39Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x10R\x05value:\x028\x01\x1a6\n" +
	"\bM3aEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\x1a6\n" +
	"\bM3bEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1a6\n" +
	"\bM3cEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1aJ\n" +
	"\bM3dEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\x0e2\x12.hyperpb.test.EnumR\x05value:\x028\x01\x1a6\n" +
	"\bM3eEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a6\n" +
	"\bM3fEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1a6\n" +
	"\bM40Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a6\n" +
	"\bM41Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1a6\n" +
	"\bM42Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1a6\n" +
	"\bM43Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1a6\n" +
	"\bM44Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x11R\x05value:\x028\x01\x1a6\n" +
	"\bM45Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x12R\x05value:\x028\x01\x1a6\n" +
	"\bM46Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\aR\x05value:\x028\x01\x1a6\n" +
	"\bM47Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x06R\x05value:\x028\x01\x1a6\n" +
	"\bM48Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x0fR\x05value:\x028\x01\x1a6\n" +
	"\bM49Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x10R\x05value:\x028\x01\x1a6\n" +
	"\bM4aEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\x1a6\n" +
	"\bM4bEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1a6\n" +
	"\bM4cEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1aJ\n" +
	"\bM4dEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\x0e2\x12.hyperpb.test.EnumR\x05value:\x028\x01\x1a6\n" +
	"\bM4eEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a6\n" +
	"\bM4fEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1a6\n" +
	"\bM50Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x11R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a6\n" +
	"\bM51Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x11R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1a6\n" +
	"\bM52Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x11R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1a6\n" +
	"\bM53Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x11R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1a6\n" +
	"\bM54Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x11R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x11R\x05value:\x028\x01\x1a6\n" +
	"\bM55Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x11R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x12R\x05value:\x028\x01\x1a6\n" +
	"\bM56Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x11R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\aR\x05value:\x028\x01\x1a6\n" +
	"\bM57Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x11R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x06R\x05value:\x028\x01\x1a6\n" +
	"\bM58Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x11R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x0fR\x05value:\x028\x01\x1a6\n" +
	"\bM59Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x11R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x10R\x05value:\x028\x01\x1a6\n" +
	"\bM5aEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x11R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\x1a6\n" +
	"\bM5bEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x11R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1a6\n" +
	"\bM5cEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x11R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1aJ\n" +
	"\bM5dEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x11R\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\x0e2\x12.hyperpb.test.EnumR\x05value:\x028\x01\x1a6\n" +
	"\bM5eEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x11R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a6\n" +
	"\bM5fEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x11R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1a6\n" +
	"\bM60Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x12R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a6\n" +
	"\bM61Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x12R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1a6\n" +
	"\bM62Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x12R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1a6\n" +
	"\bM63Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x12R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1a6\n" +
	"\bM64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x12R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x11R\x05value:\x028\x01\x1a6\n" +
	"\bM65Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x12R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x12R\x05value:\x028\x01\x1a6\n" +
	"\bM66Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x12R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\aR\x05value:\x028\x01\x1a6\n" +
	"\bM67Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x12R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x06R\x05value:\x028\x01\x1a6\n" +
	"\bM68Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x12R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x0fR\x05value:\x028\x01\x1a6\n" +
	"\bM69Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x12R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x10R\x05value:\x028\x01\x1a6\n" +
	"\bM6aEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x12R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\x1a6\n" +
	"\bM6bEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x12R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1a6\n" +
	"\bM6cEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x12R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1aJ\n" +
	"\bM6dEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x12R\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\x0e2\x12.hyperpb.test.EnumR\x05value:\x028\x01\x1a6\n" +
	"\bM6eEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x12R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a6\n" +
	"\bM6fEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x12R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1a6\n" +
	"\bM70Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\aR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a6\n" +
	"\bM71Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\aR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1a6\n" +
	"\bM72Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\aR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1a6\n" +
	"\bM73Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\aR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1a6\n" +
	"\bM74Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\aR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x11R\x05value:\x028\x01\x1a6\n" +
	"\bM75Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\aR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x12R\x05value:\x028\x01\x1a6\n" +
	"\bM76Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\aR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\aR\x05value:\x028\x01\x1a6\n" +
	"\bM77Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\aR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x06R\x05value:\x028\x01\x1a6\n" +
	"\bM78Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\aR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x0fR\x05value:\x028\x01\x1a6\n" +
	"\bM79Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\aR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x10R\x05value:\x028\x01\x1a6\n" +
	"\bM7aEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\aR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\x1a6\n" +
	"\bM7bEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\aR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1a6\n" +
	"\bM7cEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\aR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1aJ\n" +
	"\bM7dEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\aR\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\x0e2\x12.hyperpb.test.EnumR\x05value:\x028\x01\x1a6\n" +
	"\bM7eEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\aR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a6\n" +
	"\bM7fEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\aR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1a6\n" +
	"\bM80Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x06R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a6\n" +
	"\bM81Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x06R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1a6\n" +
	"\bM82Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x06R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1a6\n" +
	"\bM83Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x06R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1a6\n" +
	"\bM84Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x06R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x11R\x05value:\x028\x01\x1a6\n" +
	"\bM85Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x06R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x12R\x05value:\x028\x01\x1a6\n" +
	"\bM86Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x06R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\aR\x05value:\x028\x01\x1a6\n" +
	"\bM87Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x06R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x06R\x05value:\x028\x01\x1a6\n" +
	"\bM88Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x06R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x0fR\x05value:\x028\x01\x1a6\n" +
	"\bM89Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x06R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x10R\x05value:\x028\x01\x1a6\n" +
	"\bM8aEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x06R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\x1a6\n" +
	"\bM8bEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x06R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1a6\n" +
	"\bM8cEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x06R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1aJ\n" +
	"\bM8dEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x06R\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\x0e2\x12.hyperpb.test.EnumR\x05value:\x028\x01\x1a6\n" +
	"\bM8eEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x06R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a6\n" +
	"\bM8fEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x06R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1a6\n" +
	"\bM90Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x0fR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a6\n" +
	"\bM91Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x0fR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1a6\n" +
	"\bM92Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x0fR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1a6\n" +
	"\bM93Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x0fR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1a6\n" +
	"\bM94Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x0fR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x11R\x05value:\x028\x01\x1a6\n" +
	"\bM95Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x0fR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x12R\x05value:\x028\x01\x1a6\n" +
	"\bM96Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x0fR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\aR\x05value:\x028\x01\x1a6\n" +
	"\bM97Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x0fR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x06R\x05value:\x028\x01\x1a6\n" +
	"\bM98Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x0fR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x0fR\x05value:\x028\x01\x1a6\n" +
	"\bM99Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x0fR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x10R\x05value:\x028\x01\x1a6\n" +
	"\bM9aEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x0fR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\x1a6\n" +
	"\bM9bEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x0fR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1a6\n" +
	"\bM9cEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x0fR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1aJ\n" +
	"\bM9dEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x0fR\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\x0e2\x12.hyperpb.test.EnumR\x05value:\x028\x01\x1a6\n" +
	"\bM9eEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x0fR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a6\n" +
	"\bM9fEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x0fR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1a6\n" +
	"\bMa0Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x10R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a6\n" +
	"\bMa1Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x10R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1a6\n" +
	"\bMa2Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x10R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1a6\n" +
	"\bMa3Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x10R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1a6\n" +
	"\bMa4Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x10R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x11R\x05value:\x028\x01\x1a6\n" +
	"\bMa5Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x10R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x12R\x05value:\x028\x01\x1a6\n" +
	"\bMa6Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x10R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\aR\x05value:\x028\x01\x1a6\n" +
	"\bMa7Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x10R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x06R\x05value:\x028\x01\x1a6\n" +
	"\bMa8Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x10R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x0fR\x05value:\x028\x01\x1a6\n" +
	"\bMa9Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x10R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x10R\x05value:\x028\x01\x1a6\n" +
	"\bMaaEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x10R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\x1a6\n" +
	"\bMabEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x10R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1a6\n" +
	"\bMacEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x10R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1aJ\n" +
	"\bMadEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x10R\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\x0e2\x12.hyperpb.test.EnumR\x05value:\x028\x01\x1a6\n" +
	"\bMaeEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x10R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a6\n" +
	"\bMafEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x10R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1a6\n" +
	"\bMb0Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a6\n" +
	"\bMb1Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1a6\n" +
	"\bMb2Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1a6\n" +
	"\bMb3Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1a6\n" +
	"\bMb4Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x11R\x05value:\x028\x01\x1a6\n" +
	"\bMb5Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x12R\x05value:\x028\x01\x1a6\n" +
	"\bMb6Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\aR\x05value:\x028\x01\x1a6\n" +
	"\bMb7Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x06R\x05value:\x028\x01\x1a6\n" +
	"\bMb8Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x0fR\x05value:\x028\x01\x1a6\n" +
	"\bMb9Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x10R\x05value:\x028\x01\x1a6\n" +
	"\bMbaEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\x1a6\n" +
	"\bMbbEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1a6\n" +
	"\bMbcEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1aJ\n" +
	"\bMbdEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\x0e2\x12.hyperpb.test.EnumR\x05value:\x028\x01\x1a6\n" +
	"\bMbeEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a6\n" +
	"\bMbfEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1a6\n" +
	"\bMc0Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a6\n" +
	"\bMc1Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1a6\n" +
	"\bMc2Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1a6\n" +
	"\bMc3Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1a6\n" +
	"\bMc4Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x11R\x05value:\x028\x01\x1a6\n" +
	"\bMc5Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x12R\x05value:\x028\x01\x1a6\n" +
	"\bMc6Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\aR\x05value:\x028\x01\x1a6\n" +
	"\bMc7Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x06R\x05value:\x028\x01\x1a6\n" +
	"\bMc8Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x0fR\x05value:\x028\x01\x1a6\n" +
	"\bMc9Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x10R\x05value:\x028\x01\x1a6\n" +
	"\bMcaEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\x1a6\n" +
	"\bMcbEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1a6\n" +
	"\bMccEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1aJ\n" +
	"\bMcdEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\x0e2\x12.hyperpb.test.EnumR\x05value:\x028\x01\x1a6\n" +
	"\bMceEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a6\n" +
	"\bMcfEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\"\xf5\v\n" +
	"\vMessageMaps\x12/\n" +
	"\ascalars\x18\x01 \x01(\v2\x15.hyperpb.test.ScalarsR\ascalars\x121\n" +
	"\x02m1\x18\x11 \x03(\v2!.hyperpb.test.MessageMaps.M1EntryR\x02m1\x121\n" +
	"\x02m2\x18\x12 \x03(\v2!.hyperpb.test.MessageMaps.M2EntryR\x02m2\x121\n" +
	"\x02m3\x18\x13 \x03(\v2!.hyperpb.test.MessageMaps.M3EntryR\x02m3\x121\n" +
	"\x02m4\x18\x14 \x03(\v2!.hyperpb.test.MessageMaps.M4EntryR\x02m4\x121\n" +
	"\x02m5\x18\x15 \x03(\v2!.hyperpb.test.MessageMaps.M5EntryR\x02m5\x121\n" +
	"\x02m6\x18\x16 \x03(\v2!.hyperpb.test.MessageMaps.M6EntryR\x02m6\x121\n" +
	"\x02m7\x18\x17 \x03(\v2!.hyperpb.test.MessageMaps.M7EntryR\x02m7\x121\n" +
	"\x02m8\x18\x18 \x03(\v2!.hyperpb.test.MessageMaps.M8EntryR\x02m8\x121\n" +
	"\x02m9\x18\x19 \x03(\v2!.hyperpb.test.MessageMaps.M9EntryR\x02m9\x121\n" +
	"\x02ma\x18\x1a \x03(\v2!.hyperpb.test.MessageMaps.MaEntryR\x02ma\x121\n" +
	"\x02mc\x18\x1c \x03(\v2!.hyperpb.test.MessageMaps.McEntryR\x02mc\x1aP\n" +
	"\aM1Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.hyperpb.test.MessageMapsR\x05value:\x028\x01\x1aP\n" +
	"\aM2Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.hyperpb.test.MessageMapsR\x05value:\x028\x01\x1aP\n" +
	"\aM3Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.hyperpb.test.MessageMapsR\x05value:\x028\x01\x1aP\n" +
	"\aM4Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.hyperpb.test.MessageMapsR\x05value:\x028\x01\x1aP\n" +
	"\aM5Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x11R\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.hyperpb.test.MessageMapsR\x05value:\x028\x01\x1aP\n" +
	"\aM6Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x12R\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.hyperpb.test.MessageMapsR\x05value:\x028\x01\x1aP\n" +
	"\aM7Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\aR\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.hyperpb.test.MessageMapsR\x05value:\x028\x01\x1aP\n" +
	"\aM8Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x06R\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.hyperpb.test.MessageMapsR\x05value:\x028\x01\x1aP\n" +
	"\aM9Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x0fR\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.hyperpb.test.MessageMapsR\x05value:\x028\x01\x1aP\n" +
	"\aMaEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x10R\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.hyperpb.test.MessageMapsR\x05value:\x028\x01\x1aP\n" +
	"\aMcEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.hyperpb.test.MessageMapsR\x05value:\x028\x01\"\xd0\x02\n" +
	"\fPathological\x12.\n" +
	"\x01x\x18\x01 \x03(\v2 .hyperpb.test.Pathological.InnerR\x01x\x1a\x8f\x02\n" +
	"\x05Inner\x12\x0e\n" +
	"\x02x1\x18\x01 \x01(\x05R\x02x1\x12\x0e\n" +
	"\x02x2\x18\x02 \x01(\x05R\x02x2\x12\x0e\n" +
	"\x02x3\x18\x03 \x01(\x05R\x02x3\x12\x0e\n" +
	"\x02x4\x18\x04 \x01(\x05R\x02x4\x12\x0e\n" +
	"\x02x5\x18\x05 \x01(\x05R\x02x5\x12\x0e\n" +
	"\x02x6\x18\x06 \x01(\x05R\x02x6\x12\x0e\n" +
	"\x02x7\x18\a \x01(\x05R\x02x7\x12\x0e\n" +
	"\x02x8\x18\b \x01(\x05R\x02x8\x12\x0e\n" +
	"\x02x9\x18\t \x01(\x05R\x02x9\x12\x0e\n" +
	"\x02xa\x18\n" +
	" \x01(\x05R\x02xa\x12\x0e\n" +
	"\x02xb\x18\v \x01(\x05R\x02xb\x12\x0e\n" +
	"\x02xc\x18\f \x01(\x05R\x02xc\x12\x0e\n" +
	"\x02xd\x18\r \x01(\x05R\x02xd\x12\x0e\n" +
	"\x02xe\x18\x0e \x01(\x05R\x02xe\x12\x0e\n" +
	"\x02xf\x18\x0f \x01(\x05R\x02xf\x12\x16\n" +
	"\x06actual\x18d \x01(\tR\x06actual*@\n" +
	"\x04Enum\x12\x14\n" +
	"\x10ENUM_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06ENUM_1\x10\x01\x12\n" +
	"\n" +
	"\x06ENUM_2\x10\x02\x12\n" +
	"\n" +
	"\x06ENUM_3\x10\x03B\x96\x01\n" +
	"\x10com.hyperpb.testB\tTestProtoP\x01Z&buf.build/go/hyperpb/internal/gen/test\xa2\x02\x03HTX\xaa\x02\fHyperpb.Test\xca\x02\fHyperpb\\Test\xe2\x02\x18Hyperpb\\Test\\GPBMetadata\xea\x02\rHyperpb::Testb\x06proto3"

var (
	file_test_test_proto_rawDescOnce sync.Once
	file_test_test_proto_rawDescData []byte
)

func file_test_test_proto_rawDescGZIP() []byte {
	file_test_test_proto_rawDescOnce.Do(func() {
		file_test_test_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_test_test_proto_rawDesc), len(file_test_test_proto_rawDesc)))
	})
	return file_test_test_proto_rawDescData
}

var file_test_test_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_test_test_proto_msgTypes = make([]protoimpl.MessageInfo, 212)
var file_test_test_proto_goTypes = []any{
	(Enum)(0),                  // 0: hyperpb.test.Enum
	(*Scalars)(nil),            // 1: hyperpb.test.Scalars
	(*Numbers)(nil),            // 2: hyperpb.test.Numbers
	(*Repeated)(nil),           // 3: hyperpb.test.Repeated
	(*Graph)(nil),              // 4: hyperpb.test.Graph
	(*Oneof)(nil),              // 5: hyperpb.test.Oneof
	(*Maps)(nil),               // 6: hyperpb.test.Maps
	(*MessageMaps)(nil),        // 7: hyperpb.test.MessageMaps
	(*Pathological)(nil),       // 8: hyperpb.test.Pathological
	nil,                        // 9: hyperpb.test.Maps.M10Entry
	nil,                        // 10: hyperpb.test.Maps.M11Entry
	nil,                        // 11: hyperpb.test.Maps.M12Entry
	nil,                        // 12: hyperpb.test.Maps.M13Entry
	nil,                        // 13: hyperpb.test.Maps.M14Entry
	nil,                        // 14: hyperpb.test.Maps.M15Entry
	nil,                        // 15: hyperpb.test.Maps.M16Entry
	nil,                        // 16: hyperpb.test.Maps.M17Entry
	nil,                        // 17: hyperpb.test.Maps.M18Entry
	nil,                        // 18: hyperpb.test.Maps.M19Entry
	nil,                        // 19: hyperpb.test.Maps.M1aEntry
	nil,                        // 20: hyperpb.test.Maps.M1bEntry
	nil,                        // 21: hyperpb.test.Maps.M1cEntry
	nil,                        // 22: hyperpb.test.Maps.M1dEntry
	nil,                        // 23: hyperpb.test.Maps.M1eEntry
	nil,                        // 24: hyperpb.test.Maps.M1fEntry
	nil,                        // 25: hyperpb.test.Maps.M20Entry
	nil,                        // 26: hyperpb.test.Maps.M21Entry
	nil,                        // 27: hyperpb.test.Maps.M22Entry
	nil,                        // 28: hyperpb.test.Maps.M23Entry
	nil,                        // 29: hyperpb.test.Maps.M24Entry
	nil,                        // 30: hyperpb.test.Maps.M25Entry
	nil,                        // 31: hyperpb.test.Maps.M26Entry
	nil,                        // 32: hyperpb.test.Maps.M27Entry
	nil,                        // 33: hyperpb.test.Maps.M28Entry
	nil,                        // 34: hyperpb.test.Maps.M29Entry
	nil,                        // 35: hyperpb.test.Maps.M2aEntry
	nil,                        // 36: hyperpb.test.Maps.M2bEntry
	nil,                        // 37: hyperpb.test.Maps.M2cEntry
	nil,                        // 38: hyperpb.test.Maps.M2dEntry
	nil,                        // 39: hyperpb.test.Maps.M2eEntry
	nil,                        // 40: hyperpb.test.Maps.M2fEntry
	nil,                        // 41: hyperpb.test.Maps.M30Entry
	nil,                        // 42: hyperpb.test.Maps.M31Entry
	nil,                        // 43: hyperpb.test.Maps.M32Entry
	nil,                        // 44: hyperpb.test.Maps.M33Entry
	nil,                        // 45: hyperpb.test.Maps.M34Entry
	nil,                        // 46: hyperpb.test.Maps.M35Entry
	nil,                        // 47: hyperpb.test.Maps.M36Entry
	nil,                        // 48: hyperpb.test.Maps.M37Entry
	nil,                        // 49: hyperpb.test.Maps.M38Entry
	nil,                        // 50: hyperpb.test.Maps.M39Entry
	nil,                        // 51: hyperpb.test.Maps.M3aEntry
	nil,                        // 52: hyperpb.test.Maps.M3bEntry
	nil,                        // 53: hyperpb.test.Maps.M3cEntry
	nil,                        // 54: hyperpb.test.Maps.M3dEntry
	nil,                        // 55: hyperpb.test.Maps.M3eEntry
	nil,                        // 56: hyperpb.test.Maps.M3fEntry
	nil,                        // 57: hyperpb.test.Maps.M40Entry
	nil,                        // 58: hyperpb.test.Maps.M41Entry
	nil,                        // 59: hyperpb.test.Maps.M42Entry
	nil,                        // 60: hyperpb.test.Maps.M43Entry
	nil,                        // 61: hyperpb.test.Maps.M44Entry
	nil,                        // 62: hyperpb.test.Maps.M45Entry
	nil,                        // 63: hyperpb.test.Maps.M46Entry
	nil,                        // 64: hyperpb.test.Maps.M47Entry
	nil,                        // 65: hyperpb.test.Maps.M48Entry
	nil,                        // 66: hyperpb.test.Maps.M49Entry
	nil,                        // 67: hyperpb.test.Maps.M4aEntry
	nil,                        // 68: hyperpb.test.Maps.M4bEntry
	nil,                        // 69: hyperpb.test.Maps.M4cEntry
	nil,                        // 70: hyperpb.test.Maps.M4dEntry
	nil,                        // 71: hyperpb.test.Maps.M4eEntry
	nil,                        // 72: hyperpb.test.Maps.M4fEntry
	nil,                        // 73: hyperpb.test.Maps.M50Entry
	nil,                        // 74: hyperpb.test.Maps.M51Entry
	nil,                        // 75: hyperpb.test.Maps.M52Entry
	nil,                        // 76: hyperpb.test.Maps.M53Entry
	nil,                        // 77: hyperpb.test.Maps.M54Entry
	nil,                        // 78: hyperpb.test.Maps.M55Entry
	nil,                        // 79: hyperpb.test.Maps.M56Entry
	nil,                        // 80: hyperpb.test.Maps.M57Entry
	nil,                        // 81: hyperpb.test.Maps.M58Entry
	nil,                        // 82: hyperpb.test.Maps.M59Entry
	nil,                        // 83: hyperpb.test.Maps.M5aEntry
	nil,                        // 84: hyperpb.test.Maps.M5bEntry
	nil,                        // 85: hyperpb.test.Maps.M5cEntry
	nil,                        // 86: hyperpb.test.Maps.M5dEntry
	nil,                        // 87: hyperpb.test.Maps.M5eEntry
	nil,                        // 88: hyperpb.test.Maps.M5fEntry
	nil,                        // 89: hyperpb.test.Maps.M60Entry
	nil,                        // 90: hyperpb.test.Maps.M61Entry
	nil,                        // 91: hyperpb.test.Maps.M62Entry
	nil,                        // 92: hyperpb.test.Maps.M63Entry
	nil,                        // 93: hyperpb.test.Maps.M64Entry
	nil,                        // 94: hyperpb.test.Maps.M65Entry
	nil,                        // 95: hyperpb.test.Maps.M66Entry
	nil,                        // 96: hyperpb.test.Maps.M67Entry
	nil,                        // 97: hyperpb.test.Maps.M68Entry
	nil,                        // 98: hyperpb.test.Maps.M69Entry
	nil,                        // 99: hyperpb.test.Maps.M6aEntry
	nil,                        // 100: hyperpb.test.Maps.M6bEntry
	nil,                        // 101: hyperpb.test.Maps.M6cEntry
	nil,                        // 102: hyperpb.test.Maps.M6dEntry
	nil,                        // 103: hyperpb.test.Maps.M6eEntry
	nil,                        // 104: hyperpb.test.Maps.M6fEntry
	nil,                        // 105: hyperpb.test.Maps.M70Entry
	nil,                        // 106: hyperpb.test.Maps.M71Entry
	nil,                        // 107: hyperpb.test.Maps.M72Entry
	nil,                        // 108: hyperpb.test.Maps.M73Entry
	nil,                        // 109: hyperpb.test.Maps.M74Entry
	nil,                        // 110: hyperpb.test.Maps.M75Entry
	nil,                        // 111: hyperpb.test.Maps.M76Entry
	nil,                        // 112: hyperpb.test.Maps.M77Entry
	nil,                        // 113: hyperpb.test.Maps.M78Entry
	nil,                        // 114: hyperpb.test.Maps.M79Entry
	nil,                        // 115: hyperpb.test.Maps.M7aEntry
	nil,                        // 116: hyperpb.test.Maps.M7bEntry
	nil,                        // 117: hyperpb.test.Maps.M7cEntry
	nil,                        // 118: hyperpb.test.Maps.M7dEntry
	nil,                        // 119: hyperpb.test.Maps.M7eEntry
	nil,                        // 120: hyperpb.test.Maps.M7fEntry
	nil,                        // 121: hyperpb.test.Maps.M80Entry
	nil,                        // 122: hyperpb.test.Maps.M81Entry
	nil,                        // 123: hyperpb.test.Maps.M82Entry
	nil,                        // 124: hyperpb.test.Maps.M83Entry
	nil,                        // 125: hyperpb.test.Maps.M84Entry
	nil,                        // 126: hyperpb.test.Maps.M85Entry
	nil,                        // 127: hyperpb.test.Maps.M86Entry
	nil,                        // 128: hyperpb.test.Maps.M87Entry
	nil,                        // 129: hyperpb.test.Maps.M88Entry
	nil,                        // 130: hyperpb.test.Maps.M89Entry
	nil,                        // 131: hyperpb.test.Maps.M8aEntry
	nil,                        // 132: hyperpb.test.Maps.M8bEntry
	nil,                        // 133: hyperpb.test.Maps.M8cEntry
	nil,                        // 134: hyperpb.test.Maps.M8dEntry
	nil,                        // 135: hyperpb.test.Maps.M8eEntry
	nil,                        // 136: hyperpb.test.Maps.M8fEntry
	nil,                        // 137: hyperpb.test.Maps.M90Entry
	nil,                        // 138: hyperpb.test.Maps.M91Entry
	nil,                        // 139: hyperpb.test.Maps.M92Entry
	nil,                        // 140: hyperpb.test.Maps.M93Entry
	nil,                        // 141: hyperpb.test.Maps.M94Entry
	nil,                        // 142: hyperpb.test.Maps.M95Entry
	nil,                        // 143: hyperpb.test.Maps.M96Entry
	nil,                        // 144: hyperpb.test.Maps.M97Entry
	nil,                        // 145: hyperpb.test.Maps.M98Entry
	nil,                        // 146: hyperpb.test.Maps.M99Entry
	nil,                        // 147: hyperpb.test.Maps.M9aEntry
	nil,                        // 148: hyperpb.test.Maps.M9bEntry
	nil,                        // 149: hyperpb.test.Maps.M9cEntry
	nil,                        // 150: hyperpb.test.Maps.M9dEntry
	nil,                        // 151: hyperpb.test.Maps.M9eEntry
	nil,                        // 152: hyperpb.test.Maps.M9fEntry
	nil,                        // 153: hyperpb.test.Maps.Ma0Entry
	nil,                        // 154: hyperpb.test.Maps.Ma1Entry
	nil,                        // 155: hyperpb.test.Maps.Ma2Entry
	nil,                        // 156: hyperpb.test.Maps.Ma3Entry
	nil,                        // 157: hyperpb.test.Maps.Ma4Entry
	nil,                        // 158: hyperpb.test.Maps.Ma5Entry
	nil,                        // 159: hyperpb.test.Maps.Ma6Entry
	nil,                        // 160: hyperpb.test.Maps.Ma7Entry
	nil,                        // 161: hyperpb.test.Maps.Ma8Entry
	nil,                        // 162: hyperpb.test.Maps.Ma9Entry
	nil,                        // 163: hyperpb.test.Maps.MaaEntry
	nil,                        // 164: hyperpb.test.Maps.MabEntry
	nil,                        // 165: hyperpb.test.Maps.MacEntry
	nil,                        // 166: hyperpb.test.Maps.MadEntry
	nil,                        // 167: hyperpb.test.Maps.MaeEntry
	nil,                        // 168: hyperpb.test.Maps.MafEntry
	nil,                        // 169: hyperpb.test.Maps.Mb0Entry
	nil,                        // 170: hyperpb.test.Maps.Mb1Entry
	nil,                        // 171: hyperpb.test.Maps.Mb2Entry
	nil,                        // 172: hyperpb.test.Maps.Mb3Entry
	nil,                        // 173: hyperpb.test.Maps.Mb4Entry
	nil,                        // 174: hyperpb.test.Maps.Mb5Entry
	nil,                        // 175: hyperpb.test.Maps.Mb6Entry
	nil,                        // 176: hyperpb.test.Maps.Mb7Entry
	nil,                        // 177: hyperpb.test.Maps.Mb8Entry
	nil,                        // 178: hyperpb.test.Maps.Mb9Entry
	nil,                        // 179: hyperpb.test.Maps.MbaEntry
	nil,                        // 180: hyperpb.test.Maps.MbbEntry
	nil,                        // 181: hyperpb.test.Maps.MbcEntry
	nil,                        // 182: hyperpb.test.Maps.MbdEntry
	nil,                        // 183: hyperpb.test.Maps.MbeEntry
	nil,                        // 184: hyperpb.test.Maps.MbfEntry
	nil,                        // 185: hyperpb.test.Maps.Mc0Entry
	nil,                        // 186: hyperpb.test.Maps.Mc1Entry
	nil,                        // 187: hyperpb.test.Maps.Mc2Entry
	nil,                        // 188: hyperpb.test.Maps.Mc3Entry
	nil,                        // 189: hyperpb.test.Maps.Mc4Entry
	nil,                        // 190: hyperpb.test.Maps.Mc5Entry
	nil,                        // 191: hyperpb.test.Maps.Mc6Entry
	nil,                        // 192: hyperpb.test.Maps.Mc7Entry
	nil,                        // 193: hyperpb.test.Maps.Mc8Entry
	nil,                        // 194: hyperpb.test.Maps.Mc9Entry
	nil,                        // 195: hyperpb.test.Maps.McaEntry
	nil,                        // 196: hyperpb.test.Maps.McbEntry
	nil,                        // 197: hyperpb.test.Maps.MccEntry
	nil,                        // 198: hyperpb.test.Maps.McdEntry
	nil,                        // 199: hyperpb.test.Maps.MceEntry
	nil,                        // 200: hyperpb.test.Maps.McfEntry
	nil,                        // 201: hyperpb.test.MessageMaps.M1Entry
	nil,                        // 202: hyperpb.test.MessageMaps.M2Entry
	nil,                        // 203: hyperpb.test.MessageMaps.M3Entry
	nil,                        // 204: hyperpb.test.MessageMaps.M4Entry
	nil,                        // 205: hyperpb.test.MessageMaps.M5Entry
	nil,                        // 206: hyperpb.test.MessageMaps.M6Entry
	nil,                        // 207: hyperpb.test.MessageMaps.M7Entry
	nil,                        // 208: hyperpb.test.MessageMaps.M8Entry
	nil,                        // 209: hyperpb.test.MessageMaps.M9Entry
	nil,                        // 210: hyperpb.test.MessageMaps.MaEntry
	nil,                        // 211: hyperpb.test.MessageMaps.McEntry
	(*Pathological_Inner)(nil), // 212: hyperpb.test.Pathological.Inner
}
var file_test_test_proto_depIdxs = []int32{
	4,   // 0: hyperpb.test.Graph.s:type_name -> hyperpb.test.Graph
	4,   // 1: hyperpb.test.Graph.r:type_name -> hyperpb.test.Graph
	5,   // 2: hyperpb.test.Oneof.m10:type_name -> hyperpb.test.Oneof
	9,   // 3: hyperpb.test.Maps.m10:type_name -> hyperpb.test.Maps.M10Entry
	10,  // 4: hyperpb.test.Maps.m11:type_name -> hyperpb.test.Maps.M11Entry
	11,  // 5: hyperpb.test.Maps.m12:type_name -> hyperpb.test.Maps.M12Entry
	12,  // 6: hyperpb.test.Maps.m13:type_name -> hyperpb.test.Maps.M13Entry
	13,  // 7: hyperpb.test.Maps.m14:type_name -> hyperpb.test.Maps.M14Entry
	14,  // 8: hyperpb.test.Maps.m15:type_name -> hyperpb.test.Maps.M15Entry
	15,  // 9: hyperpb.test.Maps.m16:type_name -> hyperpb.test.Maps.M16Entry
	16,  // 10: hyperpb.test.Maps.m17:type_name -> hyperpb.test.Maps.M17Entry
	17,  // 11: hyperpb.test.Maps.m18:type_name -> hyperpb.test.Maps.M18Entry
	18,  // 12: hyperpb.test.Maps.m19:type_name -> hyperpb.test.Maps.M19Entry
	19,  // 13: hyperpb.test.Maps.m1a:type_name -> hyperpb.test.Maps.M1aEntry
	20,  // 14: hyperpb.test.Maps.m1b:type_name -> hyperpb.test.Maps.M1bEntry
	21,  // 15: hyperpb.test.Maps.m1c:type_name -> hyperpb.test.Maps.M1cEntry
	22,  // 16: hyperpb.test.Maps.m1d:type_name -> hyperpb.test.Maps.M1dEntry
	23,  // 17: hyperpb.test.Maps.m1e:type_name -> hyperpb.test.Maps.M1eEntry
	24,  // 18: hyperpb.test.Maps.m1f:type_name -> hyperpb.test.Maps.M1fEntry
	25,  // 19: hyperpb.test.Maps.m20:type_name -> hyperpb.test.Maps.M20Entry
	26,  // 20: hyperpb.test.Maps.m21:type_name -> hyperpb.test.Maps.M21Entry
	27,  // 21: hyperpb.test.Maps.m22:type_name -> hyperpb.test.Maps.M22Entry
	28,  // 22: hyperpb.test.Maps.m23:type_name -> hyperpb.test.Maps.M23Entry
	29,  // 23: hyperpb.test.Maps.m24:type_name -> hyperpb.test.Maps.M24Entry
	30,  // 24: hyperpb.test.Maps.m25:type_name -> hyperpb.test.Maps.M25Entry
	31,  // 25: hyperpb.test.Maps.m26:type_name -> hyperpb.test.Maps.M26Entry
	32,  // 26: hyperpb.test.Maps.m27:type_name -> hyperpb.test.Maps.M27Entry
	33,  // 27: hyperpb.test.Maps.m28:type_name -> hyperpb.test.Maps.M28Entry
	34,  // 28: hyperpb.test.Maps.m29:type_name -> hyperpb.test.Maps.M29Entry
	35,  // 29: hyperpb.test.Maps.m2a:type_name -> hyperpb.test.Maps.M2aEntry
	36,  // 30: hyperpb.test.Maps.m2b:type_name -> hyperpb.test.Maps.M2bEntry
	37,  // 31: hyperpb.test.Maps.m2c:type_name -> hyperpb.test.Maps.M2cEntry
	38,  // 32: hyperpb.test.Maps.m2d:type_name -> hyperpb.test.Maps.M2dEntry
	39,  // 33: hyperpb.test.Maps.m2e:type_name -> hyperpb.test.Maps.M2eEntry
	40,  // 34: hyperpb.test.Maps.m2f:type_name -> hyperpb.test.Maps.M2fEntry
	41,  // 35: hyperpb.test.Maps.m30:type_name -> hyperpb.test.Maps.M30Entry
	42,  // 36: hyperpb.test.Maps.m31:type_name -> hyperpb.test.Maps.M31Entry
	43,  // 37: hyperpb.test.Maps.m32:type_name -> hyperpb.test.Maps.M32Entry
	44,  // 38: hyperpb.test.Maps.m33:type_name -> hyperpb.test.Maps.M33Entry
	45,  // 39: hyperpb.test.Maps.m34:type_name -> hyperpb.test.Maps.M34Entry
	46,  // 40: hyperpb.test.Maps.m35:type_name -> hyperpb.test.Maps.M35Entry
	47,  // 41: hyperpb.test.Maps.m36:type_name -> hyperpb.test.Maps.M36Entry
	48,  // 42: hyperpb.test.Maps.m37:type_name -> hyperpb.test.Maps.M37Entry
	49,  // 43: hyperpb.test.Maps.m38:type_name -> hyperpb.test.Maps.M38Entry
	50,  // 44: hyperpb.test.Maps.m39:type_name -> hyperpb.test.Maps.M39Entry
	51,  // 45: hyperpb.test.Maps.m3a:type_name -> hyperpb.test.Maps.M3aEntry
	52,  // 46: hyperpb.test.Maps.m3b:type_name -> hyperpb.test.Maps.M3bEntry
	53,  // 47: hyperpb.test.Maps.m3c:type_name -> hyperpb.test.Maps.M3cEntry
	54,  // 48: hyperpb.test.Maps.m3d:type_name -> hyperpb.test.Maps.M3dEntry
	55,  // 49: hyperpb.test.Maps.m3e:type_name -> hyperpb.test.Maps.M3eEntry
	56,  // 50: hyperpb.test.Maps.m3f:type_name -> hyperpb.test.Maps.M3fEntry
	57,  // 51: hyperpb.test.Maps.m40:type_name -> hyperpb.test.Maps.M40Entry
	58,  // 52: hyperpb.test.Maps.m41:type_name -> hyperpb.test.Maps.M41Entry
	59,  // 53: hyperpb.test.Maps.m42:type_name -> hyperpb.test.Maps.M42Entry
	60,  // 54: hyperpb.test.Maps.m43:type_name -> hyperpb.test.Maps.M43Entry
	61,  // 55: hyperpb.test.Maps.m44:type_name -> hyperpb.test.Maps.M44Entry
	62,  // 56: hyperpb.test.Maps.m45:type_name -> hyperpb.test.Maps.M45Entry
	63,  // 57: hyperpb.test.Maps.m46:type_name -> hyperpb.test.Maps.M46Entry
	64,  // 58: hyperpb.test.Maps.m47:type_name -> hyperpb.test.Maps.M47Entry
	65,  // 59: hyperpb.test.Maps.m48:type_name -> hyperpb.test.Maps.M48Entry
	66,  // 60: hyperpb.test.Maps.m49:type_name -> hyperpb.test.Maps.M49Entry
	67,  // 61: hyperpb.test.Maps.m4a:type_name -> hyperpb.test.Maps.M4aEntry
	68,  // 62: hyperpb.test.Maps.m4b:type_name -> hyperpb.test.Maps.M4bEntry
	69,  // 63: hyperpb.test.Maps.m4c:type_name -> hyperpb.test.Maps.M4cEntry
	70,  // 64: hyperpb.test.Maps.m4d:type_name -> hyperpb.test.Maps.M4dEntry
	71,  // 65: hyperpb.test.Maps.m4e:type_name -> hyperpb.test.Maps.M4eEntry
	72,  // 66: hyperpb.test.Maps.m4f:type_name -> hyperpb.test.Maps.M4fEntry
	73,  // 67: hyperpb.test.Maps.m50:type_name -> hyperpb.test.Maps.M50Entry
	74,  // 68: hyperpb.test.Maps.m51:type_name -> hyperpb.test.Maps.M51Entry
	75,  // 69: hyperpb.test.Maps.m52:type_name -> hyperpb.test.Maps.M52Entry
	76,  // 70: hyperpb.test.Maps.m53:type_name -> hyperpb.test.Maps.M53Entry
	77,  // 71: hyperpb.test.Maps.m54:type_name -> hyperpb.test.Maps.M54Entry
	78,  // 72: hyperpb.test.Maps.m55:type_name -> hyperpb.test.Maps.M55Entry
	79,  // 73: hyperpb.test.Maps.m56:type_name -> hyperpb.test.Maps.M56Entry
	80,  // 74: hyperpb.test.Maps.m57:type_name -> hyperpb.test.Maps.M57Entry
	81,  // 75: hyperpb.test.Maps.m58:type_name -> hyperpb.test.Maps.M58Entry
	82,  // 76: hyperpb.test.Maps.m59:type_name -> hyperpb.test.Maps.M59Entry
	83,  // 77: hyperpb.test.Maps.m5a:type_name -> hyperpb.test.Maps.M5aEntry
	84,  // 78: hyperpb.test.Maps.m5b:type_name -> hyperpb.test.Maps.M5bEntry
	85,  // 79: hyperpb.test.Maps.m5c:type_name -> hyperpb.test.Maps.M5cEntry
	86,  // 80: hyperpb.test.Maps.m5d:type_name -> hyperpb.test.Maps.M5dEntry
	87,  // 81: hyperpb.test.Maps.m5e:type_name -> hyperpb.test.Maps.M5eEntry
	88,  // 82: hyperpb.test.Maps.m5f:type_name -> hyperpb.test.Maps.M5fEntry
	89,  // 83: hyperpb.test.Maps.m60:type_name -> hyperpb.test.Maps.M60Entry
	90,  // 84: hyperpb.test.Maps.m61:type_name -> hyperpb.test.Maps.M61Entry
	91,  // 85: hyperpb.test.Maps.m62:type_name -> hyperpb.test.Maps.M62Entry
	92,  // 86: hyperpb.test.Maps.m63:type_name -> hyperpb.test.Maps.M63Entry
	93,  // 87: hyperpb.test.Maps.m64:type_name -> hyperpb.test.Maps.M64Entry
	94,  // 88: hyperpb.test.Maps.m65:type_name -> hyperpb.test.Maps.M65Entry
	95,  // 89: hyperpb.test.Maps.m66:type_name -> hyperpb.test.Maps.M66Entry
	96,  // 90: hyperpb.test.Maps.m67:type_name -> hyperpb.test.Maps.M67Entry
	97,  // 91: hyperpb.test.Maps.m68:type_name -> hyperpb.test.Maps.M68Entry
	98,  // 92: hyperpb.test.Maps.m69:type_name -> hyperpb.test.Maps.M69Entry
	99,  // 93: hyperpb.test.Maps.m6a:type_name -> hyperpb.test.Maps.M6aEntry
	100, // 94: hyperpb.test.Maps.m6b:type_name -> hyperpb.test.Maps.M6bEntry
	101, // 95: hyperpb.test.Maps.m6c:type_name -> hyperpb.test.Maps.M6cEntry
	102, // 96: hyperpb.test.Maps.m6d:type_name -> hyperpb.test.Maps.M6dEntry
	103, // 97: hyperpb.test.Maps.m6e:type_name -> hyperpb.test.Maps.M6eEntry
	104, // 98: hyperpb.test.Maps.m6f:type_name -> hyperpb.test.Maps.M6fEntry
	105, // 99: hyperpb.test.Maps.m70:type_name -> hyperpb.test.Maps.M70Entry
	106, // 100: hyperpb.test.Maps.m71:type_name -> hyperpb.test.Maps.M71Entry
	107, // 101: hyperpb.test.Maps.m72:type_name -> hyperpb.test.Maps.M72Entry
	108, // 102: hyperpb.test.Maps.m73:type_name -> hyperpb.test.Maps.M73Entry
	109, // 103: hyperpb.test.Maps.m74:type_name -> hyperpb.test.Maps.M74Entry
	110, // 104: hyperpb.test.Maps.m75:type_name -> hyperpb.test.Maps.M75Entry
	111, // 105: hyperpb.test.Maps.m76:type_name -> hyperpb.test.Maps.M76Entry
	112, // 106: hyperpb.test.Maps.m77:type_name -> hyperpb.test.Maps.M77Entry
	113, // 107: hyperpb.test.Maps.m78:type_name -> hyperpb.test.Maps.M78Entry
	114, // 108: hyperpb.test.Maps.m79:type_name -> hyperpb.test.Maps.M79Entry
	115, // 109: hyperpb.test.Maps.m7a:type_name -> hyperpb.test.Maps.M7aEntry
	116, // 110: hyperpb.test.Maps.m7b:type_name -> hyperpb.test.Maps.M7bEntry
	117, // 111: hyperpb.test.Maps.m7c:type_name -> hyperpb.test.Maps.M7cEntry
	118, // 112: hyperpb.test.Maps.m7d:type_name -> hyperpb.test.Maps.M7dEntry
	119, // 113: hyperpb.test.Maps.m7e:type_name -> hyperpb.test.Maps.M7eEntry
	120, // 114: hyperpb.test.Maps.m7f:type_name -> hyperpb.test.Maps.M7fEntry
	121, // 115: hyperpb.test.Maps.m80:type_name -> hyperpb.test.Maps.M80Entry
	122, // 116: hyperpb.test.Maps.m81:type_name -> hyperpb.test.Maps.M81Entry
	123, // 117: hyperpb.test.Maps.m82:type_name -> hyperpb.test.Maps.M82Entry
	124, // 118: hyperpb.test.Maps.m83:type_name -> hyperpb.test.Maps.M83Entry
	125, // 119: hyperpb.test.Maps.m84:type_name -> hyperpb.test.Maps.M84Entry
	126, // 120: hyperpb.test.Maps.m85:type_name -> hyperpb.test.Maps.M85Entry
	127, // 121: hyperpb.test.Maps.m86:type_name -> hyperpb.test.Maps.M86Entry
	128, // 122: hyperpb.test.Maps.m87:type_name -> hyperpb.test.Maps.M87Entry
	129, // 123: hyperpb.test.Maps.m88:type_name -> hyperpb.test.Maps.M88Entry
	130, // 124: hyperpb.test.Maps.m89:type_name -> hyperpb.test.Maps.M89Entry
	131, // 125: hyperpb.test.Maps.m8a:type_name -> hyperpb.test.Maps.M8aEntry
	132, // 126: hyperpb.test.Maps.m8b:type_name -> hyperpb.test.Maps.M8bEntry
	133, // 127: hyperpb.test.Maps.m8c:type_name -> hyperpb.test.Maps.M8cEntry
	134, // 128: hyperpb.test.Maps.m8d:type_name -> hyperpb.test.Maps.M8dEntry
	135, // 129: hyperpb.test.Maps.m8e:type_name -> hyperpb.test.Maps.M8eEntry
	136, // 130: hyperpb.test.Maps.m8f:type_name -> hyperpb.test.Maps.M8fEntry
	137, // 131: hyperpb.test.Maps.m90:type_name -> hyperpb.test.Maps.M90Entry
	138, // 132: hyperpb.test.Maps.m91:type_name -> hyperpb.test.Maps.M91Entry
	139, // 133: hyperpb.test.Maps.m92:type_name -> hyperpb.test.Maps.M92Entry
	140, // 134: hyperpb.test.Maps.m93:type_name -> hyperpb.test.Maps.M93Entry
	141, // 135: hyperpb.test.Maps.m94:type_name -> hyperpb.test.Maps.M94Entry
	142, // 136: hyperpb.test.Maps.m95:type_name -> hyperpb.test.Maps.M95Entry
	143, // 137: hyperpb.test.Maps.m96:type_name -> hyperpb.test.Maps.M96Entry
	144, // 138: hyperpb.test.Maps.m97:type_name -> hyperpb.test.Maps.M97Entry
	145, // 139: hyperpb.test.Maps.m98:type_name -> hyperpb.test.Maps.M98Entry
	146, // 140: hyperpb.test.Maps.m99:type_name -> hyperpb.test.Maps.M99Entry
	147, // 141: hyperpb.test.Maps.m9a:type_name -> hyperpb.test.Maps.M9aEntry
	148, // 142: hyperpb.test.Maps.m9b:type_name -> hyperpb.test.Maps.M9bEntry
	149, // 143: hyperpb.test.Maps.m9c:type_name -> hyperpb.test.Maps.M9cEntry
	150, // 144: hyperpb.test.Maps.m9d:type_name -> hyperpb.test.Maps.M9dEntry
	151, // 145: hyperpb.test.Maps.m9e:type_name -> hyperpb.test.Maps.M9eEntry
	152, // 146: hyperpb.test.Maps.m9f:type_name -> hyperpb.test.Maps.M9fEntry
	153, // 147: hyperpb.test.Maps.ma0:type_name -> hyperpb.test.Maps.Ma0Entry
	154, // 148: hyperpb.test.Maps.ma1:type_name -> hyperpb.test.Maps.Ma1Entry
	155, // 149: hyperpb.test.Maps.ma2:type_name -> hyperpb.test.Maps.Ma2Entry
	156, // 150: hyperpb.test.Maps.ma3:type_name -> hyperpb.test.Maps.Ma3Entry
	157, // 151: hyperpb.test.Maps.ma4:type_name -> hyperpb.test.Maps.Ma4Entry
	158, // 152: hyperpb.test.Maps.ma5:type_name -> hyperpb.test.Maps.Ma5Entry
	159, // 153: hyperpb.test.Maps.ma6:type_name -> hyperpb.test.Maps.Ma6Entry
	160, // 154: hyperpb.test.Maps.ma7:type_name -> hyperpb.test.Maps.Ma7Entry
	161, // 155: hyperpb.test.Maps.ma8:type_name -> hyperpb.test.Maps.Ma8Entry
	162, // 156: hyperpb.test.Maps.ma9:type_name -> hyperpb.test.Maps.Ma9Entry
	163, // 157: hyperpb.test.Maps.maa:type_name -> hyperpb.test.Maps.MaaEntry
	164, // 158: hyperpb.test.Maps.mab:type_name -> hyperpb.test.Maps.MabEntry
	165, // 159: hyperpb.test.Maps.mac:type_name -> hyperpb.test.Maps.MacEntry
	166, // 160: hyperpb.test.Maps.mad:type_name -> hyperpb.test.Maps.MadEntry
	167, // 161: hyperpb.test.Maps.mae:type_name -> hyperpb.test.Maps.MaeEntry
	168, // 162: hyperpb.test.Maps.maf:type_name -> hyperpb.test.Maps.MafEntry
	169, // 163: hyperpb.test.Maps.mb0:type_name -> hyperpb.test.Maps.Mb0Entry
	170, // 164: hyperpb.test.Maps.mb1:type_name -> hyperpb.test.Maps.Mb1Entry
	171, // 165: hyperpb.test.Maps.mb2:type_name -> hyperpb.test.Maps.Mb2Entry
	172, // 166: hyperpb.test.Maps.mb3:type_name -> hyperpb.test.Maps.Mb3Entry
	173, // 167: hyperpb.test.Maps.mb4:type_name -> hyperpb.test.Maps.Mb4Entry
	174, // 168: hyperpb.test.Maps.mb5:type_name -> hyperpb.test.Maps.Mb5Entry
	175, // 169: hyperpb.test.Maps.mb6:type_name -> hyperpb.test.Maps.Mb6Entry
	176, // 170: hyperpb.test.Maps.mb7:type_name -> hyperpb.test.Maps.Mb7Entry
	177, // 171: hyperpb.test.Maps.mb8:type_name -> hyperpb.test.Maps.Mb8Entry
	178, // 172: hyperpb.test.Maps.mb9:type_name -> hyperpb.test.Maps.Mb9Entry
	179, // 173: hyperpb.test.Maps.mba:type_name -> hyperpb.test.Maps.MbaEntry
	180, // 174: hyperpb.test.Maps.mbb:type_name -> hyperpb.test.Maps.MbbEntry
	181, // 175: hyperpb.test.Maps.mbc:type_name -> hyperpb.test.Maps.MbcEntry
	182, // 176: hyperpb.test.Maps.mbd:type_name -> hyperpb.test.Maps.MbdEntry
	183, // 177: hyperpb.test.Maps.mbe:type_name -> hyperpb.test.Maps.MbeEntry
	184, // 178: hyperpb.test.Maps.mbf:type_name -> hyperpb.test.Maps.MbfEntry
	185, // 179: hyperpb.test.Maps.mc0:type_name -> hyperpb.test.Maps.Mc0Entry
	186, // 180: hyperpb.test.Maps.mc1:type_name -> hyperpb.test.Maps.Mc1Entry
	187, // 181: hyperpb.test.Maps.mc2:type_name -> hyperpb.test.Maps.Mc2Entry
	188, // 182: hyperpb.test.Maps.mc3:type_name -> hyperpb.test.Maps.Mc3Entry
	189, // 183: hyperpb.test.Maps.mc4:type_name -> hyperpb.test.Maps.Mc4Entry
	190, // 184: hyperpb.test.Maps.mc5:type_name -> hyperpb.test.Maps.Mc5Entry
	191, // 185: hyperpb.test.Maps.mc6:type_name -> hyperpb.test.Maps.Mc6Entry
	192, // 186: hyperpb.test.Maps.mc7:type_name -> hyperpb.test.Maps.Mc7Entry
	193, // 187: hyperpb.test.Maps.mc8:type_name -> hyperpb.test.Maps.Mc8Entry
	194, // 188: hyperpb.test.Maps.mc9:type_name -> hyperpb.test.Maps.Mc9Entry
	195, // 189: hyperpb.test.Maps.mca:type_name -> hyperpb.test.Maps.McaEntry
	196, // 190: hyperpb.test.Maps.mcb:type_name -> hyperpb.test.Maps.McbEntry
	197, // 191: hyperpb.test.Maps.mcc:type_name -> hyperpb.test.Maps.MccEntry
	198, // 192: hyperpb.test.Maps.mcd:type_name -> hyperpb.test.Maps.McdEntry
	199, // 193: hyperpb.test.Maps.mce:type_name -> hyperpb.test.Maps.MceEntry
	200, // 194: hyperpb.test.Maps.mcf:type_name -> hyperpb.test.Maps.McfEntry
	1,   // 195: hyperpb.test.MessageMaps.scalars:type_name -> hyperpb.test.Scalars
	201, // 196: hyperpb.test.MessageMaps.m1:type_name -> hyperpb.test.MessageMaps.M1Entry
	202, // 197: hyperpb.test.MessageMaps.m2:type_name -> hyperpb.test.MessageMaps.M2Entry
	203, // 198: hyperpb.test.MessageMaps.m3:type_name -> hyperpb.test.MessageMaps.M3Entry
	204, // 199: hyperpb.test.MessageMaps.m4:type_name -> hyperpb.test.MessageMaps.M4Entry
	205, // 200: hyperpb.test.MessageMaps.m5:type_name -> hyperpb.test.MessageMaps.M5Entry
	206, // 201: hyperpb.test.MessageMaps.m6:type_name -> hyperpb.test.MessageMaps.M6Entry
	207, // 202: hyperpb.test.MessageMaps.m7:type_name -> hyperpb.test.MessageMaps.M7Entry
	208, // 203: hyperpb.test.MessageMaps.m8:type_name -> hyperpb.test.MessageMaps.M8Entry
	209, // 204: hyperpb.test.MessageMaps.m9:type_name -> hyperpb.test.MessageMaps.M9Entry
	210, // 205: hyperpb.test.MessageMaps.ma:type_name -> hyperpb.test.MessageMaps.MaEntry
	211, // 206: hyperpb.test.MessageMaps.mc:type_name -> hyperpb.test.MessageMaps.McEntry
	212, // 207: hyperpb.test.Pathological.x:type_name -> hyperpb.test.Pathological.Inner
	0,   // 208: hyperpb.test.Maps.M1dEntry.value:type_name -> hyperpb.test.Enum
	0,   // 209: hyperpb.test.Maps.M2dEntry.value:type_name -> hyperpb.test.Enum
	0,   // 210: hyperpb.test.Maps.M3dEntry.value:type_name -> hyperpb.test.Enum
	0,   // 211: hyperpb.test.Maps.M4dEntry.value:type_name -> hyperpb.test.Enum
	0,   // 212: hyperpb.test.Maps.M5dEntry.value:type_name -> hyperpb.test.Enum
	0,   // 213: hyperpb.test.Maps.M6dEntry.value:type_name -> hyperpb.test.Enum
	0,   // 214: hyperpb.test.Maps.M7dEntry.value:type_name -> hyperpb.test.Enum
	0,   // 215: hyperpb.test.Maps.M8dEntry.value:type_name -> hyperpb.test.Enum
	0,   // 216: hyperpb.test.Maps.M9dEntry.value:type_name -> hyperpb.test.Enum
	0,   // 217: hyperpb.test.Maps.MadEntry.value:type_name -> hyperpb.test.Enum
	0,   // 218: hyperpb.test.Maps.MbdEntry.value:type_name -> hyperpb.test.Enum
	0,   // 219: hyperpb.test.Maps.McdEntry.value:type_name -> hyperpb.test.Enum
	7,   // 220: hyperpb.test.MessageMaps.M1Entry.value:type_name -> hyperpb.test.MessageMaps
	7,   // 221: hyperpb.test.MessageMaps.M2Entry.value:type_name -> hyperpb.test.MessageMaps
	7,   // 222: hyperpb.test.MessageMaps.M3Entry.value:type_name -> hyperpb.test.MessageMaps
	7,   // 223: hyperpb.test.MessageMaps.M4Entry.value:type_name -> hyperpb.test.MessageMaps
	7,   // 224: hyperpb.test.MessageMaps.M5Entry.value:type_name -> hyperpb.test.MessageMaps
	7,   // 225: hyperpb.test.MessageMaps.M6Entry.value:type_name -> hyperpb.test.MessageMaps
	7,   // 226: hyperpb.test.MessageMaps.M7Entry.value:type_name -> hyperpb.test.MessageMaps
	7,   // 227: hyperpb.test.MessageMaps.M8Entry.value:type_name -> hyperpb.test.MessageMaps
	7,   // 228: hyperpb.test.MessageMaps.M9Entry.value:type_name -> hyperpb.test.MessageMaps
	7,   // 229: hyperpb.test.MessageMaps.MaEntry.value:type_name -> hyperpb.test.MessageMaps
	7,   // 230: hyperpb.test.MessageMaps.McEntry.value:type_name -> hyperpb.test.MessageMaps
	231, // [231:231] is the sub-list for method output_type
	231, // [231:231] is the sub-list for method input_type
	231, // [231:231] is the sub-list for extension type_name
	231, // [231:231] is the sub-list for extension extendee
	0,   // [0:231] is the sub-list for field type_name
}

func init() { file_test_test_proto_init() }
func file_test_test_proto_init() {
	if File_test_test_proto != nil {
		return
	}
	file_test_test_proto_msgTypes[0].OneofWrappers = []any{}
	file_test_test_proto_msgTypes[4].OneofWrappers = []any{
		(*Oneof_S1)(nil),
		(*Oneof_M1)(nil),
		(*Oneof_M2)(nil),
		(*Oneof_M3)(nil),
		(*Oneof_M4)(nil),
		(*Oneof_M5)(nil),
		(*Oneof_M6)(nil),
		(*Oneof_M7)(nil),
		(*Oneof_M8)(nil),
		(*Oneof_M9)(nil),
		(*Oneof_M10)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_test_test_proto_rawDesc), len(file_test_test_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   212,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_test_test_proto_goTypes,
		DependencyIndexes: file_test_test_proto_depIdxs,
		EnumInfos:         file_test_test_proto_enumTypes,
		MessageInfos:      file_test_test_proto_msgTypes,
	}.Build()
	File_test_test_proto = out.File
	file_test_test_proto_goTypes = nil
	file_test_test_proto_depIdxs = nil
}
